<html><head><head><body><pre><br><br><br><a href = "ActionsAndRules.h.htm">ActionsAndRules.h - ActionsAndRules.h.htm</a><br><a href = "ConfigureParser.h.htm">ConfigureParser.h - ConfigureParser.h.htm</a><br><a href = "Parser.h.htm">Parser.h - Parser.h.htm</a><br><br><br>/////////////////////////////////////////////////////////////////////<br>//  Parser.cpp - Analyzes C++ language constructs                  //<br>//  ver 1.5                                                        //<br>//  Language:      Visual C++ 2008, SP1                            //<br>//  Platform:      Dell XPS 8900, Windows 10                       //<br>//  Application:   Prototype for CSE687 Pr1, Sp09, ...             //<br>//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //<br>//                 (315) 443-3948, jfawcett@twcny.rr.com           //<br>/////////////////////////////////////////////////////////////////////<br><br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include "../Utilities/Utilities.h"<br>#include "../Tokenizer/Tokenizer.h"<br>#include "../SemiExp/SemiExp.h"<br>#include "Parser.h"<br>#include "ActionsAndRules.h"<br>#include "ConfigureParser.h"<br><br>using namespace CodeAnalysis;<br>using namespace Scanner;<br>using namespace Utilities;<br>using Demo = Logging::StaticLogger&lt;1&gt;;<br><br>//----&lt; register parsing rule &gt;--------------------------------<br><br>void Parser::addRule(IRule* pRule)<br>{ <button onclick = "myFunction1()">-</button><div id = "myDIV1"><br>  rules.push_back(pRule);<br>}</div><script>function myFunction1() {var x = document.getElementById('myDIV1');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>//----&lt; get next ITokCollection &gt;------------------------------<br><br>bool Parser::next() <br>{ <button onclick = "myFunction2()">-</button><div id = "myDIV2"> <br>  bool succeeded = pTokColl-&gt;get();<br><br>  if (!succeeded)<br>  { <button onclick = "myFunction2()">-</button><div id = "myDIV2"><br>    return false;<br>  }</div><script>function myFunction2() {var x = document.getElementById('myDIV2');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  std::string debug = pTokColl-&gt;show();<br>  //GrammarHelper::showParseDemo("get SemiExp: ", *pTokColl);<br><br>  pTokColl-&gt;trim();<br><br>  return true;<br>}</div><script>function myFunction3() {var x = document.getElementById('myDIV3');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>//----&lt; parse the SemiExp by applying all rules to it &gt;--------<br><br>bool Parser::parse()<br>{ <button onclick = "myFunction4()">-</button><div id = "myDIV4"><br>  for (size_t i = 0; i&lt;rules.size(); ++i)<br>  { <button onclick = "myFunction4()">-</button><div id = "myDIV4"><br>    std::string debug = pTokColl-&gt;show();<br><br>    bool doWhat = rules[i]-&gt;doTest(pTokColl);<br>    if (doWhat == IRule::Stop)<br>      break;<br>  }</div><script>function myFunction4() {var x = document.getElementById('myDIV4');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  return true;<br>}</div><script>function myFunction5() {var x = document.getElementById('myDIV5');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>//----&lt; register action with a rule &gt;--------------------------<br><br>void IRule::addAction(IAction *pAction)<br>{ <button onclick = "myFunction6()">-</button><div id = "myDIV6"><br>  actions.push_back(pAction);<br>}</div><script>function myFunction6() {var x = document.getElementById('myDIV6');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>//----&lt; invoke all actions associated with a rule &gt;------------<br><br>void IRule::doActions(const ITokCollection* pTokColl)<br>{ <button onclick = "myFunction7()">-</button><div id = "myDIV7"><br>  if(actions.size() &gt; 0)<br>    for(size_t i=0; i&lt;actions.size(); ++i)<br>      actions[i]-&gt;doAction(pTokColl);<br>}</div><script>function myFunction7() {var x = document.getElementById('myDIV7');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>//----&lt; test stub &gt;--------------------------------------------<br><br>#include "../FileSystem/FileSystem.h"<br><br>#ifdef TEST_PARSER<br><br>#include &lt;queue&gt;<br>#include &lt;string&gt;<br>#define Util StringHelper<br><br>int main(int argc, char* argv[])<br>{ <button onclick = "myFunction8()">-</button><div id = "myDIV8"><br>  Util::Title("Testing Parser Class");<br>  putline();<br><br>  // collecting tokens from files, named on the command line<br><br>  if(argc &lt; 2)<br>  { <button onclick = "myFunction8()">-</button><div id = "myDIV8"><br>    std::cout <br>      &lt;&lt; "\n  please enter name of file to process on command line\n\n";<br>    return 1;<br>  }</div><script>function myFunction8() {var x = document.getElementById('myDIV8');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>  for(int i=1; i&lt;argc; ++i)<br>  { <button onclick = "myFunction9()">-</button><div id = "myDIV9"><br>    std::string fileSpec = FileSystem::Path::getFullFileSpec(argv[i]);<br>    std::string msg = "Processing file" + fileSpec;<br>    Util::title(msg);<br>    putline();<br><br>    ConfigParseForCodeAnal configure;<br>    Parser* pParser = configure.Build();<br>    try<br>    { <button onclick = "myFunction9()">-</button><div id = "myDIV9"><br>      if(pParser)<br>      { <button onclick = "myFunction9()">-</button><div id = "myDIV9"><br>        if(!configure.Attach(argv[i]))<br>        { <button onclick = "myFunction9()">-</button><div id = "myDIV9"><br>          std::cout &lt;&lt; "\n  could not open file " &lt;&lt; fileSpec &lt;&lt; std::endl;<br>          continue;<br>        }</div><script>function myFunction9() {var x = document.getElementById('myDIV9');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction10() {var x = document.getElementById('myDIV10');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      else<br>      { <button onclick = "myFunction11()">-</button><div id = "myDIV11"><br>        std::cout &lt;&lt; "\n\n  Parser not built\n\n";<br>        return 1;<br>      }</div><script>function myFunction11() {var x = document.getElementById('myDIV11');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      // now that parser is built, use it<br><br>      while(pParser-&gt;next())<br>        pParser-&gt;parse();<br>      std::cout &lt;&lt; "\n";<br><br>      // show AST<br>      Repository* pRepo = Repository::getInstance();<br>      ASTNode* pGlobalScope = pRepo-&gt;getGlobalScope();<br>      TreeWalk(pGlobalScope);<br>    }</div><script>function myFunction12() {var x = document.getElementById('myDIV12');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    catch(std::exception& ex)<br>    { <button onclick = "myFunction13()">-</button><div id = "myDIV13"><br>      std::cout &lt;&lt; "\n\n    " &lt;&lt; ex.what() &lt;&lt; "\n\n";<br>    }</div><script>function myFunction13() {var x = document.getElementById('myDIV13');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction14() {var x = document.getElementById('myDIV14');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  std::cout &lt;&lt; "\n";<br>}</div><script>function myFunction15() {var x = document.getElementById('myDIV15');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>#endif<br></pre</body></html>