<html><head><head><body><pre><br><br><br><a href = "ActionsAndRules.h.htm">ActionsAndRules.h - ActionsAndRules.h.htm</a><br><br><br>#ifndef ACTIONSANDRULES_H<br>#define ACTIONSANDRULES_H<br>/////////////////////////////////////////////////////////////////////<br>//  ActionsAndRules.h - declares new parsing rules and actions     //<br>//  ver 3.3                                                        //<br>//  Language:      Visual C++ 2008, SP1                            //<br>//  Platform:      Dell Precision T7400, Vista Ultimate SP1        //<br>//  Application:   Prototype for CSE687 Pr1, Sp09                  //<br>//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //<br>//                 (315) 443-3948, jfawcett@twcny.rr.com           //<br>/////////////////////////////////////////////////////////////////////<br>/*<br>  Module Operations: <br>  ==================<br>  This module defines several action classes.  Its classes provide <br>  specialized services needed for specific applications.  The modules<br>  Parser, SemiExpression, and Tokenizer, are intended to be reusable<br>  without change.  This module provides a place to put extensions of<br>  these facilities and is not expected to be reusable. <br><br>  Public Interface:<br>  =================<br>  Toker t(someFile);              // create tokenizer instance<br>  SemiExp se(&t);                 // create a SemiExp attached to tokenizer<br>  Parser parser(se);              // now we have a parser<br>  Rule1 r1;                       // create instance of a derived Rule class<br>  Action1 a1;                     // create a derived action<br>  r1.addAction(&a1);              // register action with the rule<br>  parser.addRule(&r1);            // register rule with parser<br>  while(se.getSemiExp())          // get semi-expression<br>    parser.parse();               //   and parse it<br><br>  Build Process:<br>  ==============<br>  Required files<br>    - Parser.h, Parser.cpp, ScopeStack.h, ScopeStack.cpp,<br>      ActionsAndRules.h, ActionsAndRules.cpp, ConfigureParser.cpp,<br>      ItokCollection.h, SemiExpression.h, SemiExpression.cpp, tokenizer.h, tokenizer.cpp<br>  Build commands (either one)<br>    - devenv CodeAnalysis.sln<br>    - cl /EHsc /DTEST_PARSER parser.cpp ActionsAndRules.cpp \<br>         semiexpression.cpp tokenizer.cpp /link setargv.obj<br><br>  Maintenance History:<br>  ====================<br>  ver 3.3 : 26 Feb 2017<br>  - Fixed bug in public data analysis with changes to rule CppDeclaration<br>    and its action HandleCppDeclaration.<br>  - Fixed a minor bug in name collection for operators.  Won't be important<br>    for dependency analysis.<br>  ver 3.2 : 28 Aug 16<br>  - fixed errors in many rules and actions based on lots of testing<br>  - cleaned up text, removing comments and improving prologues<br>  ver 3.1 : 23 Aug 16<br>  - qualified input pointers in rules and actions as const<br>  - cleaned up code by removing unreachables and commented code, and by simplifying <br>  ver 3.0 : 06 Aug 16<br>  - Added use of AbstrSynTree<br>  - Added new rules and actions<br>  - Renamed and modified most of the other actions and rules<br>  ver 2.1 : 15 Feb 16<br>  - small functional change to a few of the actions changes display strategy<br>  - preface the (new) Toker and SemiExp with Scanner namespace<br>  ver 2.0 : 01 Jun 11<br>  - added processing on way to building strong code analyzer<br>  ver 1.1 : 17 Jan 09<br>  - changed to accept a pointer to interfaced ITokCollection instead<br>    of a SemiExpression<br>  ver 1.0 : 12 Jan 06<br>  - first release<br><br>  Planned Changes:<br>  ================<br>  C++ lambda detection needs strengthening<br>*/<br>//<br>#include &lt;queue&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iomanip&gt;<br>#include "Parser.h"<br>#include "../GrammarHelpers/GrammarHelpers.h"<br>#include "../SemiExp/itokcollection.h"<br>#include "../ScopeStack/ScopeStack.h"<br>#include "../Tokenizer/Tokenizer.h"<br>#include "../SemiExp/SemiExp.h"<br>#include "../AbstractSyntaxTree/AbstrSynTree.h"<br>#include "../Logger/Logger.h"<br>#include "../FileSystem/FileSystem.h"<br><br>namespace CodeAnalysis<br>{ <button onclick = "myFunction1()">-</button><div id = "myDIV1">  <br>  ///////////////////////////////////////////////////////////////////<br>  // Repository instance is used to share resources<br>  // among all actions.<br><br>  enum Language { <button onclick = "myFunction1()">-</button><div id = "myDIV1"> C /* not implemented */, Cpp, CSharp }</div><script>function myFunction1() {var x = document.getElementById('myDIV1');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  class Repository  // application specific<br>  { <button onclick = "myFunction2()">-</button><div id = "myDIV2"><br>  public:<br>    using Rslt = Logging::StaticLogger&lt;0&gt;;  // use for application results<br>    using Demo = Logging::StaticLogger&lt;1&gt;;  // use for demonstrations of processing<br>    using Dbug = Logging::StaticLogger&lt;2&gt;;  // use for debug output<br>    using Package = std::string;<br>    using Path = std::string;<br><br>  private:<br>    Language language_ = Language::Cpp;<br>    Path path_;<br>    ScopeStack&lt;ASTNode*&gt; stack;<br>    AbstrSynTree ast;<br>    ASTNode* pGlobalScope;<br>    Package package_;<br>    Scanner::Toker* p_Toker;<br>    Access currentAccess_ = Access::publ;<br>    static Repository* instance;<br>  <br>  public:<br>    <br>    Repository(Scanner::Toker* pToker) : ast(stack)<br>    { <button onclick = "myFunction2()">-</button><div id = "myDIV2"><br>      p_Toker = pToker;<br>      pGlobalScope = stack.top();<br>      instance = this;<br>    }</div><script>function myFunction2() {var x = document.getElementById('myDIV2');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    ~Repository()<br>    { <button onclick = "myFunction3()">-</button><div id = "myDIV3"><br>      Dbug::write("\n  deleting repository");<br>    }</div><script>function myFunction3() {var x = document.getElementById('myDIV3');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    Language& language() { <button onclick = "myFunction4()">-</button><div id = "myDIV4"> return language_; }</div><script>function myFunction4() {var x = document.getElementById('myDIV4');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    Package& package() { <button onclick = "myFunction5()">-</button><div id = "myDIV5"> return package_; }</div><script>function myFunction5() {var x = document.getElementById('myDIV5');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    Path& currentPath() { <button onclick = "myFunction6()">-</button><div id = "myDIV6"> return path_; }</div><script>function myFunction6() {var x = document.getElementById('myDIV6');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    Access& currentAccess() { <button onclick = "myFunction7()">-</button><div id = "myDIV7"> return currentAccess_; }</div><script>function myFunction7() {var x = document.getElementById('myDIV7');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    static Repository* getInstance() { <button onclick = "myFunction8()">-</button><div id = "myDIV8"> return instance; }</div><script>function myFunction8() {var x = document.getElementById('myDIV8');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    ScopeStack&lt;ASTNode*&gt;& scopeStack() { <button onclick = "myFunction9()">-</button><div id = "myDIV9"> return stack; }</div><script>function myFunction9() {var x = document.getElementById('myDIV9');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    AbstrSynTree& AST() { <button onclick = "myFunction10()">-</button><div id = "myDIV10"> return ast; }</div><script>function myFunction10() {var x = document.getElementById('myDIV10');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    ASTNode* getGlobalScope() { <button onclick = "myFunction11()">-</button><div id = "myDIV11"> return pGlobalScope; }</div><script>function myFunction11() {var x = document.getElementById('myDIV11');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    Scanner::Toker* Toker() { <button onclick = "myFunction12()">-</button><div id = "myDIV12"> return p_Toker; }</div><script>function myFunction12() {var x = document.getElementById('myDIV12');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    size_t lineCount() <br>    { <button onclick = "myFunction13()">-</button><div id = "myDIV13"> <br>      return (size_t)(p_Toker-&gt;currentLineCount()); <br>    }</div><script>function myFunction13() {var x = document.getElementById('myDIV13');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction14() {var x = document.getElementById('myDIV14');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect beginning of scope<br><br>  class BeginScope : public IRule<br>  { <button onclick = "myFunction15()">-</button><div id = "myDIV15"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction15()">-</button><div id = "myDIV15"><br>      GrammarHelper::showParseDemo("Test begin scope", *pTc);<br><br>      // don't parse SemiExp with single semicolon token<br><br>      if (pTc-&gt;length() == 1 && (*pTc)[0] == ";")<br>        return IRule::Stop;<br><br>      if (pTc-&gt;find("{ <button onclick = "myFunction15()">-</button><div id = "myDIV15">") &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction15()">-</button><div id = "myDIV15"><br>        doActions(pTc);<br>      }</div><script>function myFunction15() {var x = document.getElementById('myDIV15');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction16() {var x = document.getElementById('myDIV16');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction17() {var x = document.getElementById('myDIV17');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to handle scope stack at beginning of scope<br><br>  class HandleBeginScope : public IAction<br>  { <button onclick = "myFunction18()">-</button><div id = "myDIV18"><br>    Repository* p_Repos;<br>  public:<br>    HandleBeginScope(Repository* pRepos)<br>    { <button onclick = "myFunction18()">-</button><div id = "myDIV18"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction18() {var x = document.getElementById('myDIV18');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction19()">-</button><div id = "myDIV19"><br>      GrammarHelper::showParseDemo("handle begin scope", *pTc);<br>      //if (p_Repos-&gt;scopeStack().size() == 0)<br>      //  Repository::Demo::write("\n--- empty stack ---");<br><br>      ASTNode* pElem = new ASTNode;<br>      pElem-&gt;type_ = "anonymous";<br>      pElem-&gt;name_ = "none";<br>      pElem-&gt;package_ = p_Repos-&gt;package();<br>      pElem-&gt;startLineCount_ = p_Repos-&gt;lineCount();<br>      pElem-&gt;endLineCount_ = 1;<br>      pElem-&gt;path_ = p_Repos-&gt;currentPath();<br>      /*<br>       * make this ASTNode child of ASTNode on stack top<br>       * then push onto stack<br>       */<br>      p_Repos-&gt;AST().add(pElem);<br>    }</div><script>function myFunction19() {var x = document.getElementById('myDIV19');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction20() {var x = document.getElementById('myDIV20');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect end of scope<br><br>  class EndScope : public IRule<br>  { <button onclick = "myFunction21()">-</button><div id = "myDIV21"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction21()">-</button><div id = "myDIV21"><br>      GrammarHelper::showParseDemo("Test end scope", *pTc);<br><br>      //std::string debug = pTc-&gt;show();<br><br>      if (pTc-&gt;find("}</div><script>function myFunction21() {var x = document.getElementById('myDIV21');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>") &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction22()">-</button><div id = "myDIV22"><br>        doActions(pTc);<br>        return IRule::Stop;<br>      }</div><script>function myFunction22() {var x = document.getElementById('myDIV22');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction23() {var x = document.getElementById('myDIV23');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction24() {var x = document.getElementById('myDIV24');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to handle scope stack at end of scope<br><br>  class HandleEndScope : public IAction<br>  { <button onclick = "myFunction25()">-</button><div id = "myDIV25"><br>    Repository* p_Repos;<br>  public:<br>    using Dbug = Logging::StaticLogger&lt;2&gt;;<br><br>    HandleEndScope(Repository* pRepos)<br>    { <button onclick = "myFunction25()">-</button><div id = "myDIV25"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction25() {var x = document.getElementById('myDIV25');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction26()">-</button><div id = "myDIV26"><br>      GrammarHelper::showParseDemo("Handle end scope", *pTc);<br><br>      //if (p_Repos-&gt;scopeStack().size() == 0)<br>      //{ <button onclick = "myFunction26()">-</button><div id = "myDIV26"><br>      //  Repository::Demo::flush();<br>      //  Repository::Demo::write("\n--- empty stack ---");<br>      //}</div><script>function myFunction26() {var x = document.getElementById('myDIV26');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      //ASTNode* pDebug = p_Repos-&gt;scopeStack().top();<br>      //std::string debug1 = pDebug-&gt;name_;<br>      //std::string debug2 = pDebug-&gt;type_;<br>      //std::string debug3 = pDebug-&gt;package_;<br>      //std::string debug = pElem-&gt;name_;<br><br>      if (p_Repos-&gt;scopeStack().size() == 0)<br>        return;<br><br>      ASTNode* pElem = p_Repos-&gt;AST().pop();<br><br>      pElem-&gt;endLineCount_ = p_Repos-&gt;lineCount();<br>      if (pElem-&gt;type_ == "class" || pElem-&gt;type_ == "struct")<br>        (pElem-&gt;endLineCount_)++;<br><br>      p_Repos-&gt;currentAccess() = Access::priv;<br>    }</div><script>function myFunction27() {var x = document.getElementById('myDIV27');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction28() {var x = document.getElementById('myDIV28');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect access for C++<br><br>  class DetectAccessSpecifier : public IRule<br>  { <button onclick = "myFunction29()">-</button><div id = "myDIV29"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction29()">-</button><div id = "myDIV29"><br>      GrammarHelper::showParseDemo("Test access spec", *pTc);<br><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::Cpp)<br>        return IRule::Continue;<br><br>      size_t pos = pTc-&gt;find(":");<br>      if (0 &lt; pos && pos &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction29()">-</button><div id = "myDIV29"><br>        const std::string tok = (*pTc)[pos - 1];<br>        if (tok == "public" || tok == "protected" || tok == "private")<br>        { <button onclick = "myFunction29()">-</button><div id = "myDIV29"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction29() {var x = document.getElementById('myDIV29');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction30() {var x = document.getElementById('myDIV30');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction31() {var x = document.getElementById('myDIV31');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction32() {var x = document.getElementById('myDIV32');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to handle access specifier<br><br>  class HandleAccessSpecifier : public IAction<br>  { <button onclick = "myFunction33()">-</button><div id = "myDIV33"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleAccessSpecifier(Repository* pRepos)<br>    { <button onclick = "myFunction33()">-</button><div id = "myDIV33"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction33() {var x = document.getElementById('myDIV33');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction34()">-</button><div id = "myDIV34"><br>      GrammarHelper::showParseDemo("Handle access spec: ", *pTc);<br><br>      std::string tok = (*pTc)[pTc-&gt;length() - 2];<br>      Access& access = p_Repos-&gt;currentAccess();<br>      if (tok == "public")<br>        access = Access::publ;<br>      else if (tok == "protected")<br>        access = Access::prot;<br>      else<br>        access = Access::priv;<br>    }</div><script>function myFunction34() {var x = document.getElementById('myDIV34');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction35() {var x = document.getElementById('myDIV35');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect preprocessor statements<br><br>  class PreprocStatement : public IRule<br>  { <button onclick = "myFunction36()">-</button><div id = "myDIV36"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction36()">-</button><div id = "myDIV36"><br>      GrammarHelper::showParseDemo("Test preproc statement: ", *pTc);<br><br>      //std::string debug = pTc-&gt;show();<br><br>      if (pTc-&gt;find("#") &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction36()">-</button><div id = "myDIV36"><br>        doActions(pTc);<br>        return IRule::Stop;<br>      }</div><script>function myFunction36() {var x = document.getElementById('myDIV36');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction37() {var x = document.getElementById('myDIV37');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction38() {var x = document.getElementById('myDIV38');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add semiexp to scope stack top statements_<br><br>  class HandlePreprocStatement : public IAction<br>  { <button onclick = "myFunction39()">-</button><div id = "myDIV39"><br>    Repository* p_Repos;<br><br>  public:<br>    HandlePreprocStatement(Repository* pRepos)<br>    { <button onclick = "myFunction39()">-</button><div id = "myDIV39"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction39() {var x = document.getElementById('myDIV39');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction40()">-</button><div id = "myDIV40"><br>      GrammarHelper::showParseDemo("Handle preproc statement: ", *pTc);<br><br>      Scanner::ITokCollection* pClone = pTc-&gt;clone();<br>      ASTNode* pElem = p_Repos-&gt;scopeStack().top();<br>      pElem-&gt;statements_.push_back(pClone);<br><br>      GrammarHelper::showParse("Preproc Stmt", *pTc);<br>    }</div><script>function myFunction40() {var x = document.getElementById('myDIV40');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction41() {var x = document.getElementById('myDIV41');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect namespace statements<br><br>  class NamespaceDefinition : public IRule<br>  { <button onclick = "myFunction42()">-</button><div id = "myDIV42"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction42()">-</button><div id = "myDIV42"><br>      GrammarHelper::showParseDemo("Test namespace definition: ", *pTc);<br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      if (tc[tc.length() - 1] == "{ <button onclick = "myFunction42()">-</button><div id = "myDIV42">")<br>      { <button onclick = "myFunction42()">-</button><div id = "myDIV42"><br>        size_t len = tc.find("namespace");<br>        if (len &lt; tc.length())<br>        { <button onclick = "myFunction42()">-</button><div id = "myDIV42"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction42() {var x = document.getElementById('myDIV42');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction43() {var x = document.getElementById('myDIV43');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction44() {var x = document.getElementById('myDIV44');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction45() {var x = document.getElementById('myDIV45');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add namespace info to scope stack top<br><br>  class HandleNamespaceDefinition : public IAction<br>  { <button onclick = "myFunction46()">-</button><div id = "myDIV46"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleNamespaceDefinition(Repository* pRepos)<br>    { <button onclick = "myFunction46()">-</button><div id = "myDIV46"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction46() {var x = document.getElementById('myDIV46');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction47()">-</button><div id = "myDIV47"><br>      GrammarHelper::showParseDemo("Handle namespace definition: ", *pTc);<br><br>      ASTNode* top = p_Repos-&gt;scopeStack().top();<br><br>      std::string name = (*pTc)[pTc-&gt;find("namespace") + 1];<br>      top-&gt;type_ = "namespace";<br>      top-&gt;name_ = name;<br>      top-&gt;package_ = p_Repos-&gt;package();<br><br>      GrammarHelper::showParse("namespace def", *pTc);<br>    }</div><script>function myFunction47() {var x = document.getElementById('myDIV47');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction48() {var x = document.getElementById('myDIV48');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect class statements<br><br>  class ClassDefinition : public IRule<br>  { <button onclick = "myFunction49()">-</button><div id = "myDIV49"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction49()">-</button><div id = "myDIV49"><br>      GrammarHelper::showParseDemo("Test class definition: ", *pTc);<br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      if (tc[tc.length() - 1] == "{ <button onclick = "myFunction49()">-</button><div id = "myDIV49">")<br>      { <button onclick = "myFunction49()">-</button><div id = "myDIV49"><br>        size_t len = tc.find("class");<br>        if (len &lt; tc.length())<br>        { <button onclick = "myFunction49()">-</button><div id = "myDIV49"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction49() {var x = document.getElementById('myDIV49');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        len = tc.find("interface");<br>        if (len &lt; tc.length())<br>        { <button onclick = "myFunction50()">-</button><div id = "myDIV50"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction50() {var x = document.getElementById('myDIV50');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction51() {var x = document.getElementById('myDIV51');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction52() {var x = document.getElementById('myDIV52');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction53() {var x = document.getElementById('myDIV53');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add class info to scope stack top<br><br>  class HandleClassDefinition : public IAction<br>  { <button onclick = "myFunction54()">-</button><div id = "myDIV54"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleClassDefinition(Repository* pRepos)<br>    { <button onclick = "myFunction54()">-</button><div id = "myDIV54"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction54() {var x = document.getElementById('myDIV54');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction55()">-</button><div id = "myDIV55"><br>      GrammarHelper::showParseDemo("Handle class definition: ", *pTc);<br><br>      p_Repos-&gt;currentAccess() = Access::priv;<br><br>      ASTNode* top = p_Repos-&gt;scopeStack().top();<br>      size_t typeIndex = pTc-&gt;find("class");<br>      if (typeIndex &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction55()">-</button><div id = "myDIV55"><br>        size_t nameIndex = typeIndex + 1;<br>        std::string name = (*pTc)[nameIndex];<br>        top-&gt;type_ = "class";<br>        top-&gt;name_ = name;<br>        top-&gt;package_ = p_Repos-&gt;package();<br>        p_Repos-&gt;AST().typeMap()[name] = top;<br>        GrammarHelper::showParse("class def", *pTc);<br>      }</div><script>function myFunction55() {var x = document.getElementById('myDIV55');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      else  // C#<br>      { <button onclick = "myFunction56()">-</button><div id = "myDIV56"><br>        typeIndex = pTc-&gt;find("interface");<br>        size_t nameIndex = typeIndex + 1;<br>        std::string name = (*pTc)[nameIndex];<br>        top-&gt;type_ = "interface";<br>        top-&gt;name_ = name;<br>        top-&gt;package_ = p_Repos-&gt;package();<br>        p_Repos-&gt;AST().typeMap()[name] = top;<br>        GrammarHelper::showParse("interface def", *pTc);<br>      }</div><script>function myFunction56() {var x = document.getElementById('myDIV56');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    }</div><script>function myFunction57() {var x = document.getElementById('myDIV57');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction58() {var x = document.getElementById('myDIV58');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect struct statements<br><br>  class StructDefinition : public IRule<br>  { <button onclick = "myFunction59()">-</button><div id = "myDIV59"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction59()">-</button><div id = "myDIV59"><br>      GrammarHelper::showParseDemo("Test struct definition: ", *pTc);<br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      if (tc[tc.length() - 1] == "{ <button onclick = "myFunction59()">-</button><div id = "myDIV59">")<br>      { <button onclick = "myFunction59()">-</button><div id = "myDIV59"><br>        size_t len = tc.find("struct");<br>        if (len &lt; tc.length())<br>        { <button onclick = "myFunction59()">-</button><div id = "myDIV59"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction59() {var x = document.getElementById('myDIV59');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction60() {var x = document.getElementById('myDIV60');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction61() {var x = document.getElementById('myDIV61');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction62() {var x = document.getElementById('myDIV62');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add struct info to scope stack top<br><br>  class HandleStructDefinition : public IAction<br>  { <button onclick = "myFunction63()">-</button><div id = "myDIV63"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleStructDefinition(Repository* pRepos)<br>    { <button onclick = "myFunction63()">-</button><div id = "myDIV63"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction63() {var x = document.getElementById('myDIV63');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction64()">-</button><div id = "myDIV64"><br>      GrammarHelper::showParseDemo("Handle struct definition: ", *pTc);<br><br>      p_Repos-&gt;currentAccess() = Access::publ;<br><br>      ASTNode* top = p_Repos-&gt;scopeStack().top();<br><br>      std::string name = (*pTc)[pTc-&gt;find("struct") + 1];<br>      top-&gt;type_ = "struct";<br>      top-&gt;name_ = name;<br>      top-&gt;package_ = p_Repos-&gt;package();<br>      p_Repos-&gt;AST().typeMap()[name] = top;<br><br>      GrammarHelper::showParse("struct def", *pTc);<br>    }</div><script>function myFunction64() {var x = document.getElementById('myDIV64');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction65() {var x = document.getElementById('myDIV65');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect C++ function definitions<br><br>  class CppFunctionDefinition : public IRule<br>  { <button onclick = "myFunction66()">-</button><div id = "myDIV66"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction66()">-</button><div id = "myDIV66"><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::Cpp)<br>        return IRule::Continue;<br><br>      GrammarHelper::showParseDemo("Test C++ function definition: ", *pTc);<br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      std::string debug = pTc-&gt;show();<br><br>      if (tc[tc.length() - 1] == "{ <button onclick = "myFunction66()">-</button><div id = "myDIV66">")<br>      { <button onclick = "myFunction66()">-</button><div id = "myDIV66"><br>        if (GrammarHelper::isFunction(*pTc))<br>        { <button onclick = "myFunction66()">-</button><div id = "myDIV66"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction66() {var x = document.getElementById('myDIV66');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction67() {var x = document.getElementById('myDIV67');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction68() {var x = document.getElementById('myDIV68');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction69() {var x = document.getElementById('myDIV69');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add function info to scope stack top<br><br>  class HandleCppFunctionDefinition : public IAction<br>  { <button onclick = "myFunction70()">-</button><div id = "myDIV70"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleCppFunctionDefinition(Repository* pRepos)<br>    { <button onclick = "myFunction70()">-</button><div id = "myDIV70"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction70() {var x = document.getElementById('myDIV70');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction71()">-</button><div id = "myDIV71"><br>      GrammarHelper::showParseDemo("Handle C++ function definition: ", *pTc);<br><br>      //std::string debug = pTc-&gt;show();<br><br>      ASTNode* top = p_Repos-&gt;scopeStack().top();<br><br>      size_t nameIndex = pTc-&gt;find("(") - 1;<br>      std::string name = (*pTc)[nameIndex];<br><br>      // is function a destructor?<br><br>      if (nameIndex &gt; 0 && (*pTc)[nameIndex - 1] == "~")<br>      { <button onclick = "myFunction71()">-</button><div id = "myDIV71"><br>        --nameIndex;<br>        name = "~" + name;<br>      }</div><script>function myFunction71() {var x = document.getElementById('myDIV71');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      top-&gt;type_ = "function";<br>      top-&gt;name_ = name;<br>      top-&gt;package_ = p_Repos-&gt;package();<br><br>      GrammarHelper::showParse("function def", *pTc);<br><br>      // is function an operator?<br><br>      size_t operIndex = pTc-&gt;find("operator");<br>      if (operIndex &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction72()">-</button><div id = "myDIV72"><br>        name = "operator" + (*pTc)[operIndex + 1];// +(*pTc)[operIndex + 2];<br>        if ((*pTc)[operIndex + 2] != "(")<br>          name += (*pTc)[operIndex + 2];<br>        top-&gt;name_ = name;<br>        nameIndex = operIndex;<br>      }</div><script>function myFunction72() {var x = document.getElementById('myDIV72');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      // is function a member of a class or struct?<br><br>      if (nameIndex &gt; 1 && (*pTc)[nameIndex - 1] == "::")<br>      { <button onclick = "myFunction73()">-</button><div id = "myDIV73"><br>        //----&lt; start find class name &gt;--------------------<br><br>        std::string className = (*pTc)[nameIndex - 2];<br><br>        // is class a template?<br><br>        if (className == "&gt;")<br>        { <button onclick = "myFunction73()">-</button><div id = "myDIV73"><br>          size_t startParam = GrammarHelper::findLast(*pTc, "&lt;");<br>          if (0 &lt; startParam && startParam &lt; pTc-&gt;length())<br>            className = (*pTc)[startParam - 1];<br>        }</div><script>function myFunction73() {var x = document.getElementById('myDIV73');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        //----&lt; end find class name &gt;----------------------<br>        /*<br>        * - this function's ASTNode is at stack top<br>        * - find ASTNode of function's class<br>        * - unlink function ASTNode from stack top predecessor<br>        * - relink function ASTNode to it's class ASTNode<br>        * - leave function ASTNode on stack top as it may have child nodes<br>        */<br>        ASTNode* pClassNode = p_Repos-&gt;AST().find(className);<br>        if (pClassNode == nullptr)<br>          return;<br>        ASTNode* pFunctNode = p_Repos-&gt;scopeStack().top();<br>        ASTNode* pParentNode = p_Repos-&gt;scopeStack().predOfTop();<br>        pParentNode-&gt;children_.pop_back();           // unlink function<br>        pClassNode-&gt;children_.push_back(pFunctNode); // relink function<br>        return;<br>      }</div><script>function myFunction74() {var x = document.getElementById('myDIV74');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      // is this a lambda?<br><br>      std::string packageName = p_Repos-&gt;package();<br>      std::string ext = FileSystem::Path::getExt(packageName);<br><br>      size_t posOpenBracket = pTc-&gt;find("[");<br>      size_t posCloseBracket = pTc-&gt;find("]");<br>      size_t posBrace = pTc-&gt;find("{ <button onclick = "myFunction75()">-</button><div id = "myDIV75">");<br>      if (posOpenBracket &lt; posCloseBracket && posBrace == (posCloseBracket + 1) && posBrace &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction75()">-</button><div id = "myDIV75"><br>        std::string name;<br>        for (size_t i = posOpenBracket; i &lt; posBrace; ++i)<br>          name += (*pTc)[i];<br>        top-&gt;name_ = name;<br>        top-&gt;type_ = "lambda";<br>      }</div><script>function myFunction75() {var x = document.getElementById('myDIV75');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    }</div><script>function myFunction76() {var x = document.getElementById('myDIV76');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction77() {var x = document.getElementById('myDIV77');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect C# function definitions<br><br>  class CSharpFunctionDefinition : public IRule<br>  { <button onclick = "myFunction78()">-</button><div id = "myDIV78"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction78()">-</button><div id = "myDIV78"><br>      //std::string debug = pTc-&gt;show();<br><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::CSharp)<br>        return IRule::Continue;<br><br>      GrammarHelper::showParseDemo("Test C# function definition: ", *pTc);<br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      if (tc[tc.length() - 1] == "{ <button onclick = "myFunction78()">-</button><div id = "myDIV78">")<br>      { <button onclick = "myFunction78()">-</button><div id = "myDIV78"><br>        Scanner::SemiExp se;<br>        for (size_t i = 0; i &lt; tc.length(); ++i)<br>          se.push_back(tc[i]);<br><br>        if (GrammarHelper::isFunction(se))<br>        { <button onclick = "myFunction78()">-</button><div id = "myDIV78"><br>          std::string debug = se.show();<br>          doActions(&se);<br>          return IRule::Stop;<br>        }</div><script>function myFunction78() {var x = document.getElementById('myDIV78');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction79() {var x = document.getElementById('myDIV79');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction80() {var x = document.getElementById('myDIV80');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction81() {var x = document.getElementById('myDIV81');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add function info to scope stack top<br><br>  class HandleCSharpFunctionDefinition : public IAction<br>  { <button onclick = "myFunction82()">-</button><div id = "myDIV82"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleCSharpFunctionDefinition(Repository* pRepos)<br>    { <button onclick = "myFunction82()">-</button><div id = "myDIV82"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction82() {var x = document.getElementById('myDIV82');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction83()">-</button><div id = "myDIV83"><br>      GrammarHelper::showParseDemo("Handle C# function definition: ", *pTc);<br><br>      std::string debug = pTc-&gt;show();<br>      ASTNode* top = p_Repos-&gt;scopeStack().top();<br><br>      size_t nameIndex = pTc-&gt;find("(") - 1;<br>      std::string name = (*pTc)[nameIndex];<br><br>      // is function a destructor?<br><br>      if (nameIndex &gt; 0 && (*pTc)[nameIndex - 1] == "~")<br>      { <button onclick = "myFunction83()">-</button><div id = "myDIV83"><br>        --nameIndex;<br>        name = "~" + name;<br>      }</div><script>function myFunction83() {var x = document.getElementById('myDIV83');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      top-&gt;type_ = "function";<br>      top-&gt;name_ = name;<br>      top-&gt;package_ = p_Repos-&gt;package();<br><br>      GrammarHelper::showParse("function def", *pTc);<br><br>      // is function an operator?<br><br>      size_t operIndex = pTc-&gt;find("operator");<br>      if (operIndex &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction84()">-</button><div id = "myDIV84"><br>        name = "operator" + (*pTc)[operIndex + 1] + (*pTc)[operIndex + 2];<br>        top-&gt;name_ = name;<br>        nameIndex = operIndex;<br>      }</div><script>function myFunction84() {var x = document.getElementById('myDIV84');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      // is lambda?<br><br>      size_t posParen = pTc-&gt;find("(");<br>      size_t posBrace = pTc-&gt;find("{ <button onclick = "myFunction85()">-</button><div id = "myDIV85">");<br>      size_t posEqual = pTc-&gt;find("=");<br>      if (posParen &lt; posBrace && posBrace &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction85()">-</button><div id = "myDIV85"><br>        if (posEqual &lt; pTc-&gt;length() - 1 && (*pTc)[posEqual + 1] == "&gt;")<br>        { <button onclick = "myFunction85()">-</button><div id = "myDIV85"><br>          std::string name;<br>          for (size_t i = posParen; i &lt;= posBrace; ++i)<br>            name += (*pTc)[i];<br>          top-&gt;name_ = name;<br>          top-&gt;type_ = "lambda";<br>        }</div><script>function myFunction85() {var x = document.getElementById('myDIV85');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction86() {var x = document.getElementById('myDIV86');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    }</div><script>function myFunction87() {var x = document.getElementById('myDIV87');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction88() {var x = document.getElementById('myDIV88');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect control definitions<br><br>  class ControlDefinition : public IRule<br>  { <button onclick = "myFunction89()">-</button><div id = "myDIV89"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction89()">-</button><div id = "myDIV89"><br>      GrammarHelper::showParseDemo("Test control definition: ", *pTc);<br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      if (tc[tc.length() - 1] == "{ <button onclick = "myFunction89()">-</button><div id = "myDIV89">")<br>      { <button onclick = "myFunction89()">-</button><div id = "myDIV89"><br>        size_t len = tc.find("(");<br>        if (len &lt; tc.length() && GrammarHelper::isControlKeyWord(tc[len - 1]))<br>        { <button onclick = "myFunction89()">-</button><div id = "myDIV89"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction89() {var x = document.getElementById('myDIV89');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        else if (tc.length() &gt; 1 && GrammarHelper::isControlKeyWord(tc[tc.length() - 2]))<br>        { <button onclick = "myFunction90()">-</button><div id = "myDIV90"><br>          // shouldn't need this scope since all semiExps have been trimmed<br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction90() {var x = document.getElementById('myDIV90');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction91() {var x = document.getElementById('myDIV91');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction92() {var x = document.getElementById('myDIV92');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction93() {var x = document.getElementById('myDIV93');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add control info to scope stack top<br><br>  class HandleControlDefinition : public IAction<br>  { <button onclick = "myFunction94()">-</button><div id = "myDIV94"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleControlDefinition(Repository* pRepos)<br>    { <button onclick = "myFunction94()">-</button><div id = "myDIV94"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction94() {var x = document.getElementById('myDIV94');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction95()">-</button><div id = "myDIV95"><br>      GrammarHelper::showParseDemo("Handle control definition: ", *pTc);<br><br>      ASTNode* top = p_Repos-&gt;scopeStack().top();<br><br>      size_t nameIndex = pTc-&gt;find("(") - 1;  // if, for, while, switch, catch<br>      if (nameIndex == pTc-&gt;length() - 1)     // do, try - they don't have parens<br>        nameIndex = pTc-&gt;length() - 2;<br>      std::string name = (*pTc)[nameIndex];<br>      top-&gt;type_ = "control";<br>      top-&gt;name_ = name;<br><br>      GrammarHelper::showParse("control def", *pTc);<br>    }</div><script>function myFunction95() {var x = document.getElementById('myDIV95');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction96() {var x = document.getElementById('myDIV96');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to send semi-expression that starts a function def<br>  // to console<br><br>  class PrintFunction : public IAction<br>  { <button onclick = "myFunction97()">-</button><div id = "myDIV97"><br>    Repository* p_Repos;<br>  public:<br>    using Rslt = Logging::StaticLogger&lt;0&gt;;<br><br>    PrintFunction(Repository* pRepos)<br>    { <button onclick = "myFunction97()">-</button><div id = "myDIV97"><br>      p_Repos = pRepos;<br>    }</div><script>function myFunction97() {var x = document.getElementById('myDIV97');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction98()">-</button><div id = "myDIV98"><br>      std::ostringstream out;<br>      out &lt;&lt; "\n  FuncDef: " &lt;&lt; pTc-&gt;show().c_str();<br>      Rslt::write(out.str());<br>    }</div><script>function myFunction98() {var x = document.getElementById('myDIV98');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction99() {var x = document.getElementById('myDIV99');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to send signature of a function def to console<br><br>  class PrettyPrintFunction : public IAction<br>  { <button onclick = "myFunction100()">-</button><div id = "myDIV100"><br>    Repository* p_Repos;<br>  public:<br>    using Rslt = Logging::StaticLogger&lt;0&gt;;<br><br>    PrettyPrintFunction(Repository* pRepos) : p_Repos(pRepos) { <button onclick = "myFunction100()">-</button><div id = "myDIV100">}</div><script>function myFunction100() {var x = document.getElementById('myDIV100');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction101()">-</button><div id = "myDIV101"><br>      size_t len = pTc-&gt;find(")");<br><br>      std::ostringstream out;<br>      out &lt;&lt; "\n\n  Pretty Stmt:    ";<br>      for (size_t i = 0; i &lt; len + 1; ++i)<br>        out &lt;&lt; (*pTc)[i] &lt;&lt; " ";<br>      out &lt;&lt; "\n";<br>      Rslt::write(out.str());<br>    }</div><script>function myFunction101() {var x = document.getElementById('myDIV101');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction102() {var x = document.getElementById('myDIV102');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect C++ Declaration<br>  /*<br>  *  - Declaration ends in semicolon<br>  *  - has type, name, modifiers & initializers<br>  *  So:<br>  *  - strip off modifiers and initializers<br>  *  - if you have two things left it's a declar, else executable<br>  */<br>  class CppDeclaration : public IRule<br>  { <button onclick = "myFunction103()">-</button><div id = "myDIV103"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction103()">-</button><div id = "myDIV103"><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::Cpp)<br>        return IRule::Continue;<br><br>      GrammarHelper::showParseDemo("Test C++ declaration: ", *pTc);<br>      std::string debug3 = pTc-&gt;show();<br><br>      Scanner::SemiExp tc;<br>      tc.clone(*pTc);<br><br>      // begin added 2/26/2017<br><br>      Access access = pRepo-&gt;currentAccess();<br>      bool isPublic = false;<br>      std::string parentType = pRepo-&gt;scopeStack().top()-&gt;type_;<br><br>      if (pTc-&gt;find("private") &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction103()">-</button><div id = "myDIV103"><br>        isPublic = false;<br>        pRepo-&gt;currentAccess() = Access::priv;<br>      }</div><script>function myFunction103() {var x = document.getElementById('myDIV103');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      if (pTc-&gt;find("protected") &lt; pTc-&gt;length())<br>      { <button onclick = "myFunction104()">-</button><div id = "myDIV104"><br>        isPublic = false;<br>        pRepo-&gt;currentAccess() = Access::prot;<br>      }</div><script>function myFunction104() {var x = document.getElementById('myDIV104');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      if (pTc-&gt;find("public") &lt; pTc-&gt;length() && parentType != "function")<br>      { <button onclick = "myFunction105()">-</button><div id = "myDIV105"><br>        isPublic = true;<br>        pRepo-&gt;currentAccess() = Access::publ;<br>      }</div><script>function myFunction105() {var x = document.getElementById('myDIV105');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      // end added 2/26/2017<br><br>      if (tc.length() &gt; 0 && tc[0] == "using")<br>      { <button onclick = "myFunction106()">-</button><div id = "myDIV106"><br>        doActions(pTc);<br>        return IRule::Stop;<br>      }</div><script>function myFunction106() {var x = document.getElementById('myDIV106');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      std::string debug = tc.show();<br>      <br>      if (tc[tc.length() - 1] == ";" && tc.length() &gt; 2)<br>      { <button onclick = "myFunction107()">-</button><div id = "myDIV107"><br>        std::string nextToLast = tc[tc.length() - 2];<br>        if (nextToLast == "delete" || nextToLast == "default" || nextToLast == "const")<br>        { <button onclick = "myFunction107()">-</button><div id = "myDIV107"><br>          { <button onclick = "myFunction107()">-</button><div id = "myDIV107"><br>            // function declaration<br>            doActions(pTc);<br>            return IRule::Stop;<br>          }</div><script>function myFunction107() {var x = document.getElementById('myDIV107');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        }</div><script>function myFunction108() {var x = document.getElementById('myDIV108');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        std::string parentType = pRepo-&gt;scopeStack().top()-&gt;type_;<br>        <br>        if (GrammarHelper::isDataDeclaration(tc) || GrammarHelper::isFunctionDeclaration(tc, parentType))<br>        { <button onclick = "myFunction109()">-</button><div id = "myDIV109"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction109() {var x = document.getElementById('myDIV109');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>        if (parentType != "function")<br>        { <button onclick = "myFunction110()">-</button><div id = "myDIV110"><br>          // can't be executable so must be declaration<br><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction110() {var x = document.getElementById('myDIV110');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction111() {var x = document.getElementById('myDIV111');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction112() {var x = document.getElementById('myDIV112');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction113() {var x = document.getElementById('myDIV113');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add declaration info to scope stack top<br><br>  class HandleCppDeclaration : public IAction<br>  { <button onclick = "myFunction114()">-</button><div id = "myDIV114"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleCppDeclaration(Repository* pRepos) : p_Repos(pRepos) { <button onclick = "myFunction114()">-</button><div id = "myDIV114">}</div><script>function myFunction114() {var x = document.getElementById('myDIV114');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction115()">-</button><div id = "myDIV115"><br>      GrammarHelper::showParseDemo("Handle C++ declaration: ", *pTc);<br><br>      // save declaration info in ASTNode<br><br>      ASTNode* pCurrNode = p_Repos-&gt;scopeStack().top();<br>      DeclarationNode declNode;<br>      declNode.access_ = p_Repos-&gt;currentAccess();<br>      declNode.pTc = pTc-&gt;clone();<br>      declNode.package_ = p_Repos-&gt;package();<br>      declNode.line_ = p_Repos-&gt;lineCount();<br><br>      Scanner::SemiExp se;<br>      se.clone(*pTc);<br>      GrammarHelper::removeComments(se);<br><br>      if (se[0] == "using")<br>      { <button onclick = "myFunction115()">-</button><div id = "myDIV115"><br>        declNode.declType_ = DeclType::usingDecl;<br>        pCurrNode-&gt;decl_.push_back(declNode);<br><br>        GrammarHelper::showParse("using declar", *pTc);<br>        return;<br>      }</div><script>function myFunction115() {var x = document.getElementById('myDIV115');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      if (GrammarHelper::isFunctionDeclaration(se,"parentNotFunction"))<br>      { <button onclick = "myFunction116()">-</button><div id = "myDIV116"><br>        return;<br>      }</div><script>function myFunction116() {var x = document.getElementById('myDIV116');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      if (GrammarHelper::isDataDeclaration(se))<br>      { <button onclick = "myFunction117()">-</button><div id = "myDIV117"><br>        declNode.declType_ = DeclType::dataDecl;<br>        pCurrNode-&gt;decl_.push_back(declNode);<br>        GrammarHelper::showParse("data declar", *pTc);<br>      }</div><script>function myFunction117() {var x = document.getElementById('myDIV117');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    }</div><script>function myFunction118() {var x = document.getElementById('myDIV118');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction119() {var x = document.getElementById('myDIV119');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect C# Declaration<br>  /*<br>  *  - Declaration ends in semicolon<br>  *  - has type, name, modifiers & initializers<br>  *  So:<br>  *  - strip of modifiers and initializers<br>  *  - if you have two things left it's a declar, else executable<br>  */<br>  class CSharpDeclaration : public IRule<br>  { <button onclick = "myFunction120()">-</button><div id = "myDIV120"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction120()">-</button><div id = "myDIV120"><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::CSharp)<br>        return IRule::Continue;<br><br>      GrammarHelper::showParseDemo("Test C# declaration: ", *pTc);<br><br>      std::string debug = pTc-&gt;show();<br>      <br>      Access access = pRepo-&gt;currentAccess();<br>      bool isPublic = false;<br>      std::string parentType = pRepo-&gt;scopeStack().top()-&gt;type_;<br><br>      if (pTc-&gt;find("public") &lt; pTc-&gt;length() && parentType != "function")<br>      { <button onclick = "myFunction120()">-</button><div id = "myDIV120"><br>        isPublic = true;<br>        pRepo-&gt;currentAccess() = Access::publ;<br>      }</div><script>function myFunction120() {var x = document.getElementById('myDIV120');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      const Scanner::ITokCollection& tc = *pTc;<br>      if (tc.length() &gt; 0 && tc[0] == "using")<br>      { <button onclick = "myFunction121()">-</button><div id = "myDIV121"><br>        doActions(pTc);<br>        pRepo-&gt;currentAccess() = access;<br>        return IRule::Stop;<br>      }</div><script>function myFunction121() {var x = document.getElementById('myDIV121');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      Scanner::SemiExp se;<br>      se.clone(*pTc);<br><br>      if (GrammarHelper::isDataDeclaration(se))<br>      { <button onclick = "myFunction122()">-</button><div id = "myDIV122"><br>        doActions(pTc);<br>        pRepo-&gt;currentAccess() = access;<br>        return IRule::Stop;<br>      }</div><script>function myFunction122() {var x = document.getElementById('myDIV122');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>      if (GrammarHelper::isFunctionDeclaration(se, parentType))<br>      { <button onclick = "myFunction123()">-</button><div id = "myDIV123"><br>        doActions(pTc);<br>        pRepo-&gt;currentAccess() = access;<br>        return IRule::Stop;<br>      }</div><script>function myFunction123() {var x = document.getElementById('myDIV123');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction124() {var x = document.getElementById('myDIV124');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction125() {var x = document.getElementById('myDIV125');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to add declaration info to scope stack top<br><br>  class HandleCSharpDeclaration : public IAction<br>  { <button onclick = "myFunction126()">-</button><div id = "myDIV126"><br>    Repository* p_Repos;<br><br>  public:<br>    HandleCSharpDeclaration(Repository* pRepos) : p_Repos(pRepos) { <button onclick = "myFunction126()">-</button><div id = "myDIV126">}</div><script>function myFunction126() {var x = document.getElementById('myDIV126');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction127()">-</button><div id = "myDIV127"><br>      GrammarHelper::showParseDemo("Handle C# declaration: ", *pTc);<br><br>      // store declaration info in ASTNode<br><br>      ASTNode* pCurrNode = p_Repos-&gt;scopeStack().top();<br>      DeclarationNode declNode;<br>      declNode.access_ = p_Repos-&gt;currentAccess();<br>      declNode.pTc = pTc-&gt;clone();<br>      declNode.package_ = p_Repos-&gt;package();<br>      declNode.line_ = p_Repos-&gt;lineCount();<br><br>      Scanner::SemiExp se;<br>      se.clone(*pTc);<br>      GrammarHelper::removeComments(se);<br><br>      if (se[0] == "using")<br>      { <button onclick = "myFunction127()">-</button><div id = "myDIV127"><br>        declNode.declType_ = DeclType::usingDecl;<br>        pCurrNode-&gt;decl_.push_back(declNode);<br><br>        GrammarHelper::showParse("using declar", *pTc);<br>        return;<br>      }</div><script>function myFunction127() {var x = document.getElementById('myDIV127');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      //std::string debug = se.show();<br><br>      std::string parentType = p_Repos-&gt;scopeStack().top()-&gt;type_;<br><br>      if (GrammarHelper::isFunctionDeclaration(se, parentType))<br>      { <button onclick = "myFunction128()">-</button><div id = "myDIV128"><br>        std::string debug = se.show();<br>        Access adebug = declNode.access_;<br>        declNode.declType_ = DeclType::functionDecl;<br>        pCurrNode-&gt;decl_.push_back(declNode);<br>        GrammarHelper::showParse("function declar", *pTc);<br>      }</div><script>function myFunction128() {var x = document.getElementById('myDIV128');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      else<br>      { <button onclick = "myFunction129()">-</button><div id = "myDIV129"><br>        std::string debug = se.show();<br>        Access adebug = declNode.access_;<br>        declNode.declType_ = DeclType::dataDecl;<br>        pCurrNode-&gt;decl_.push_back(declNode);<br>        GrammarHelper::showParse("data declar", *pTc);<br>      }</div><script>function myFunction129() {var x = document.getElementById('myDIV129');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>    }</div><script>function myFunction130() {var x = document.getElementById('myDIV130');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction131() {var x = document.getElementById('myDIV131');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect C++ Executable<br><br>  class CppExecutable : public IRule<br>  { <button onclick = "myFunction132()">-</button><div id = "myDIV132"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction132()">-</button><div id = "myDIV132"><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::Cpp)<br>        return IRule::Continue;<br><br>      GrammarHelper::showParseDemo("Test C++ executable: ", *pTc);<br><br>      Scanner::SemiExp tc;<br>      tc.clone(*pTc);<br><br>      if (tc[tc.length() - 1] == ";" && tc.length() &gt; 2)<br>      { <button onclick = "myFunction132()">-</button><div id = "myDIV132"><br>        GrammarHelper::removeFunctionArgs(tc);<br>        GrammarHelper::condenseTemplateTypes(tc);<br><br>        // remove modifiers, comments, newlines, returns, and initializers<br><br>        Scanner::SemiExp se;<br>        for (size_t i = 0; i &lt; tc.length(); ++i)<br>        { <button onclick = "myFunction132()">-</button><div id = "myDIV132"><br>          if (GrammarHelper::isQualifierKeyWord(tc[i]))<br>            continue;<br>          if (se.isComment(tc[i]) || tc[i] == "\n" || tc[i] == "return")<br>            continue;<br>          if (tc[i] == "=" || tc[i] == ";")<br>          { <button onclick = "myFunction132()">-</button><div id = "myDIV132"><br>            se.push_back(";");<br>            break;<br>          }</div><script>function myFunction132() {var x = document.getElementById('myDIV132');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>          else<br>            se.push_back(tc[i]);<br>        }</div><script>function myFunction133() {var x = document.getElementById('myDIV133');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        if (se.length() != 3)  // not a declaration<br>        { <button onclick = "myFunction134()">-</button><div id = "myDIV134"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction134() {var x = document.getElementById('myDIV134');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction135() {var x = document.getElementById('myDIV135');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction136() {var x = document.getElementById('myDIV136');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction137() {var x = document.getElementById('myDIV137');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br><br>  ///////////////////////////////////////////////////////////////<br>  // action to display C++ executable info<br><br>  class HandleCppExecutable : public IAction<br>  { <button onclick = "myFunction138()">-</button><div id = "myDIV138"><br>    Repository* p_Repo;<br><br>  public:<br>    HandleCppExecutable(Repository* pRepo) : p_Repo(pRepo) { <button onclick = "myFunction138()">-</button><div id = "myDIV138">}</div><script>function myFunction138() {var x = document.getElementById('myDIV138');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction139()">-</button><div id = "myDIV139"><br>      GrammarHelper::showParseDemo("Handle C++ executable: ", *pTc);<br><br>      GrammarHelper::showParse("executable", *pTc);<br>    }</div><script>function myFunction139() {var x = document.getElementById('myDIV139');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction140() {var x = document.getElementById('myDIV140');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br>  ///////////////////////////////////////////////////////////////<br>  // rule to detect C# Executable<br><br>  class CSharpExecutable : public IRule<br>  { <button onclick = "myFunction141()">-</button><div id = "myDIV141"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction141()">-</button><div id = "myDIV141"><br>      Repository* pRepo = Repository::getInstance();<br>      if (pRepo-&gt;language() != Language::CSharp)<br>        return IRule::Continue;<br><br>      GrammarHelper::showParseDemo("Test C# executable: ", *pTc);<br><br>      const Scanner::ITokCollection& in = *pTc;<br>      Scanner::SemiExp tc;<br>      for (size_t i = 0; i &lt; in.length(); ++i)<br>        tc.push_back(in[i]);<br><br>      if (tc[tc.length() - 1] == ";" && tc.length() &gt; 2)<br>      { <button onclick = "myFunction141()">-</button><div id = "myDIV141"><br>        GrammarHelper::removeFunctionArgs(tc);<br>        GrammarHelper::condenseTemplateTypes(tc);<br><br>        // remove modifiers, comments, newlines, returns, and initializers<br><br>        Scanner::SemiExp se;<br>        for (size_t i = 0; i &lt; tc.length(); ++i)<br>        { <button onclick = "myFunction141()">-</button><div id = "myDIV141"><br>          if (GrammarHelper::isQualifierKeyWord(tc[i]))<br>            continue;<br>          if (se.isComment(tc[i]) || tc[i] == "\n" || tc[i] == "return")<br>            continue;<br>          if (tc[i] == "=" || tc[i] == ";")<br>          { <button onclick = "myFunction141()">-</button><div id = "myDIV141"><br>            se.push_back(";");<br>            break;<br>          }</div><script>function myFunction141() {var x = document.getElementById('myDIV141');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>          else<br>            se.push_back(tc[i]);<br>        }</div><script>function myFunction142() {var x = document.getElementById('myDIV142');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>        if (se.length() != 3)  // not a declaration<br>        { <button onclick = "myFunction143()">-</button><div id = "myDIV143"><br>          doActions(pTc);<br>          return IRule::Stop;<br>        }</div><script>function myFunction143() {var x = document.getElementById('myDIV143');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      }</div><script>function myFunction144() {var x = document.getElementById('myDIV144');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>      return IRule::Continue;<br>    }</div><script>function myFunction145() {var x = document.getElementById('myDIV145');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction146() {var x = document.getElementById('myDIV146');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br>  ///////////////////////////////////////////////////////////////<br>  // action to display C# executable info<br><br>  class HandleCSharpExecutable : public IAction<br>  { <button onclick = "myFunction147()">-</button><div id = "myDIV147"><br>    Repository* p_Repo;<br><br>  public:<br>    HandleCSharpExecutable(Repository* pRepo) : p_Repo(pRepo) { <button onclick = "myFunction147()">-</button><div id = "myDIV147">}</div><script>function myFunction147() {var x = document.getElementById('myDIV147');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction148()">-</button><div id = "myDIV148"><br>      GrammarHelper::showParseDemo("Handle C# executable: ", *pTc);<br><br>      Scanner::SemiExp se;<br>      se.clone(*pTc);<br>      GrammarHelper::removeComments(se);<br><br>      GrammarHelper::showParse("executable", se);<br>    }</div><script>function myFunction148() {var x = document.getElementById('myDIV148');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction149() {var x = document.getElementById('myDIV149');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br>  ///////////////////////////////////////////////////////////////<br>  // default rule<br>  // - this is here to catch any SemiExp that didn't parse<br>  // - We don't have rule for enums, so they are caugth here<br><br>  class Default : public IRule<br>  { <button onclick = "myFunction150()">-</button><div id = "myDIV150"><br>  public:<br>    bool doTest(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction150()">-</button><div id = "myDIV150"><br>      GrammarHelper::showParseDemo("Test default: ", *pTc);<br><br>      doActions(pTc);  // catches everything<br>      return IRule::Stop;<br>    }</div><script>function myFunction150() {var x = document.getElementById('myDIV150');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction151() {var x = document.getElementById('myDIV151');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br>  ///////////////////////////////////////////////////////////////<br>  // action to display default info<br><br>  /*class HandleDefault : public IAction<br>  { <button onclick = "myFunction152()">-</button><div id = "myDIV152"><br>    Repository* p_Repo;<br><br>  public:<br>    HandleDefault(Repository* pRepo) : p_Repo(pRepo) { <button onclick = "myFunction152()">-</button><div id = "myDIV152">}</div><script>function myFunction152() {var x = document.getElementById('myDIV152');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br><br>    void doAction(const Scanner::ITokCollection* pTc) override<br>    { <button onclick = "myFunction153()">-</button><div id = "myDIV153"><br>      GrammarHelper::showParseDemo("Handle default: ", *pTc);<br>      GrammarHelper::showParse("default: ", *pTc);<br>    }</div><script>function myFunction153() {var x = document.getElementById('myDIV153');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction154() {var x = document.getElementById('myDIV154');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;*/<br>  class HandleDefault : public IAction<br>  { <button onclick = "myFunction155()">-</button><div id = "myDIV155"><br>	  Repository* p_Repo;<br>  public:<br>	  HandleDefault(Repository* pRepo) : p_Repo(pRepo) { <button onclick = "myFunction155()">-</button><div id = "myDIV155">}</div><script>function myFunction155() {var x = document.getElementById('myDIV155');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>	  void doAction(const Scanner::ITokCollection* pTc) override<br>	  { <button onclick = "myFunction156()">-</button><div id = "myDIV156"><br>		  GrammarHelper::showParseDemo("Handle default: ", *pTc);<br>		  GrammarHelper::showParse("default: ", *pTc);<br>		  ASTNode* top = p_Repo-&gt;scopeStack().top();<br>		  std::string a = pTc-&gt;show();<br>		  size_t i = pTc-&gt;find("enum");<br>		  if (i == 0 && top-&gt;name_ == "none" && top-&gt;type_ == "anonymous")<br>		  { <button onclick = "myFunction156()">-</button><div id = "myDIV156"><br>			  i = pTc-&gt;find("enum");<br>			  i++;<br>			  std::string n = (*pTc)[i];<br>			  top-&gt;type_ = "enum";<br>			  top-&gt;name_ = n;<br>		  }</div><script>function myFunction156() {var x = document.getElementById('myDIV156');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>	  }</div><script>function myFunction157() {var x = document.getElementById('myDIV157');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>  }</div><script>function myFunction158() {var x = document.getElementById('myDIV158');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script>;<br>}</div><script>function myFunction159() {var x = document.getElementById('myDIV159');if (x.style.display == 'none') {x.style.display = 'block';this.value = "+";}else {x.style.display = 'none';this.value = "-";}}</script><br>#endif<br></pre</body></html>