<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "ActionsAndRules.h.htm">ActionsAndRules.h - </a><br><a href = "ConfigureParser.h.htm">ConfigureParser.h - </a><br><a href = "Parser.h.htm">Parser.h - </a><br><a href = "SemiExp.h.htm">SemiExp.h - </a><br><a href = "Tokenizer.h.htm">Tokenizer.h - </a><br><br><br>#ifndef CONFIGUREPARSER_H<br>
#define CONFIGUREPARSER_H<br>
/////////////////////////////////////////////////////////////////////<br>
//  ConfigureParser.h - builds and configures parsers              //<br>
//  ver 3.2                                                        //<br>
//                                                                 //<br>
//  Lanaguage:     Visual C++ 2005                                 //<br>
//  Platform:      Dell Dimension 9150, Windows XP SP2             //<br>
//  Application:   Prototype for CSE687 Pr1, Sp06                  //<br>
//  Author:        Jim Fawcett, CST 2-187, Syracuse University     //<br>
//                 (315) 443-3948, jfawcett@twcny.rr.com           //<br>
/////////////////////////////////////////////////////////////////////<br>
/*<br>
  Module Operations: <br>
  ==================<br>
  This module builds and configures parsers.  It builds the parser<br>
  parts and configures them with application specific rules and actions.<br>
<br>
  Public Interface:<br>
  =================<br>
  ConfigParseForCodeAnal config;<br>
  config.Build();<br>
  config.Attach(someFileName);<br>
<br>
  Build Process:<br>
  ==============<br>
  Required files<br>
    - ConfigureParser.h, ConfigureParser.cpp, Parser.h, Parser.cpp,<br>
      ActionsAndRules.h, ActionsAndRules.cpp,<br>
      SemiExpression.h, SemiExpression.cpp, tokenizer.h, tokenizer.cpp<br>
  Build commands (either one)<br>
    - devenv Project1HelpS06.sln<br>
    - cl /EHsc /DTEST_PARSER ConfigureParser.cpp parser.cpp \<br>
         ActionsAndRules.cpp \<br>
         semiexpression.cpp tokenizer.cpp /link setargv.obj<br>
<br>
  Maintenance History:<br>
  ====================<br>
  ver 3.2 : 29 Oct 2016<br>
  - added check for Byte Order Mark (BOM) in attach(...)<br>
  ver 3.1 : 27 Aug 16<br>
  - added default rule and action to configuration<br>
  ver 3.0 : 23 Aug 16<br>
  - major changes for CodeAnalysis application<br>
  ver 2.1 : 19 Feb 16<br>
  - Added PrintFunction action to FunctionDefinition rule<br>
  ver 2.0 : 01 Jun 11<br>
  - Major revisions to begin building a strong code analyzer<br>
  ver 1.1 : 01 Feb 06<br>
  - cosmetic changes to ConfigureParser.cpp<br>
  ver 1.0 : 12 Jan 06<br>
  - first release<br>
*/<br>
<br>
#include &lt;fstream&gt;<br>
#include "Parser.h"<br>
#include "ActionsAndRules.h"<br>
#include "../SemiExp/SemiExp.h"<br>
#include "../Tokenizer/Tokenizer.h"<br>
<br>
namespace CodeAnalysis<br>
{<br>
  ///////////////////////////////////////////////////////////////<br>
  // build parser that writes its output to console<br>
<br>
  class ConfigParseForCodeAnal : IBuilder<br>
  {<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
  public:<br>
    ConfigParseForCodeAnal() : pIn(nullptr) {};<br>
    ~ConfigParseForCodeAnal();<br>
    bool Attach(const std::string& name, bool isFile = true);<br>
    Parser* Build();<br>
<br>
  private:<br>
    // Builder must hold onto all the pieces<br>
<br>
    std::ifstream* pIn;<br>
    Scanner::Toker* pToker;<br>
    Scanner::SemiExp* pSemi;<br>
    Parser* pParser;<br>
    Repository* pRepo;<br>
<br>
    // add Rules and Actions<br>
<br>
    BeginScope* pBeginScope = nullptr;<br>
    HandleBeginScope* pHandleBeginScope = nullptr;<br>
<br>
    EndScope* pEndScope = nullptr;<br>
    HandleEndScope* pHandleEndScope = nullptr;<br>
<br>
    PreprocStatement* pPreprocStatement = nullptr;<br>
    HandlePreprocStatement* pHandlePreprocStatement = nullptr;<br>
<br>
    NamespaceDefinition* pNamespaceDefinition = nullptr;<br>
    HandleNamespaceDefinition* pHandleNamespaceDefinition = nullptr;<br>
<br>
    ClassDefinition* pClassDefinition = nullptr;<br>
    HandleClassDefinition* pHandleClassDefinition = nullptr;<br>
<br>
    StructDefinition* pStructDefinition = nullptr;<br>
    HandleStructDefinition* pHandleStructDefinition = nullptr;<br>
<br>
    CppFunctionDefinition* pCppFunctionDefinition = nullptr;<br>
    HandleCppFunctionDefinition* pHandleCppFunctionDefinition = nullptr;<br>
    //PrintFunction* pPrintFunction;<br>
<br>
    CSharpFunctionDefinition* pCSharpFunctionDefinition = nullptr;<br>
    HandleCSharpFunctionDefinition* pHandleCSharpFunctionDefinition = nullptr;<br>
<br>
    ControlDefinition* pControlDefinition = nullptr;<br>
    HandleControlDefinition* pHandleControlDefinition = nullptr;<br>
<br>
    CppDeclaration* pCppDeclaration = nullptr;<br>
    HandleCppDeclaration* pHandleCppDeclaration = nullptr;<br>
<br>
    CSharpDeclaration* pCSharpDeclaration = nullptr;<br>
    HandleCSharpDeclaration* pHandleCSharpDeclaration = nullptr;<br>
<br>
    CppExecutable* pCppExecutable = nullptr;<br>
    HandleCppExecutable* pHandleCppExecutable = nullptr;<br>
<br>
    CSharpExecutable* pCSharpExecutable = nullptr;<br>
    HandleCSharpExecutable* pHandleCSharpExecutable = nullptr;<br>
<br>
    Default* pDefault = nullptr;<br>
    HandleDefault* pHandleDefault = nullptr;<br>
<br>
    // prohibit copies and assignments<br>
<br>
    ConfigParseForCodeAnal(const ConfigParseForCodeAnal&) = delete;<br>
    ConfigParseForCodeAnal& operator=(const ConfigParseForCodeAnal&) = delete;<br>
  }</div>;<br>
}<br>
#endif<br>
<//pre><//body><//html>