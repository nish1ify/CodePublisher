<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "Convert.h.htm">Convert.h - </a><br><a href = "Test1.cpp.htm">Test1.cpp - </a><br><br><br>#pragma once<br>
/////////////////////////////////////////////////////////////////////<br>
// Convert.h - Demonstrate Template Syntax                         //<br>
//                                                                 //<br>
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017       //<br>
/////////////////////////////////////////////////////////////////////<br>
/*<br>
 * - Template classes use one or more unspecified types, defined by<br>
 *   arguments in the template declaration: template&lt;typename T, ...&gt;.<br>
 *<br>
 * - Because the arguments are not specified, the C++ compiler cannot<br>
 *   generate object code until it sees an application instantiate<br>
 *   the template type(s).<br>
 *<br>
 * - The consequence of this is that all template definitions must be<br>
 *   placed in a header file, to be included by the application.<br>
 *<br>
 * - Unlike C# and Java, template syntax checking happens when the<br>
 *   application is compiled.  <br>
 *<br>
 * - That means that a template class can use any methods for the <br>
 *   unspecified type and will successfully compile.  If the type does<br>
 *   not have a method used by the template code, a compile time error<br>
 *   occurs when the application is compiled.<br>
 */<br>
#include &lt;sstream&gt;<br>
#include &lt;string&gt;<br>
<br>
/////////////////////////////////////////////////////////////////////<br>
// Convert&lt;T&gt; class<br>
// - (de)serializes objects of type T (from)to strings<br>
// - generates a type identifier using Run-Time Type Identification<br>
//<br>
template&lt;typename T&gt;<br>
class Convert<br>
{<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
public:<br>
  virtual ~Convert&lt;T&gt;() {}<br>
  static std::string toString(const T& t);<br>
  static T fromString(const std::string& str);<br>
  static std::string id(const T& t);<br>
}</div>;<br>
/*----&lt; serialize t to a std::string &gt;-----------------------------*/<br>
/*<br>
 * Assumes that T defines an insertion operator.<br>
 */<br>
template&lt;typename T&gt;<br>
std::string Convert&lt;T&gt;::toString(const T& t)<br>
{<button id ="998"onclick="myFunction2();toggleText2(this.id); ">-</button><div id = "myDIV2"><br>
  std::ostringstream out;<br>
  out &lt;&lt; *const_cast&lt;T*&gt;(&t);  <br>
  return out.str();<br>
}</div><br>
/*----&lt; create an instance of T from a std::string &gt;---------------*/<br>
/*<br>
 * Assumes that T defines an extraction operator.<br>
 * To succeed str must be created from Convert&lt;T&gt;::toString(const T& t). <br>
 */<br>
template&lt;typename T&gt;<br>
T Convert&lt;T&gt;::fromString(const std::string& str)<br>
{<button id ="997"onclick="myFunction3();toggleText3(this.id); ">-</button><div id = "myDIV3"><br>
  std::istringstream in(str);<br>
  T value;<br>
  in &gt;&gt; value;    // istringstream extraction provides the conversion<br>
  return value;<br>
}</div><br>
/*----&lt; create an id string from an instance of T using RTTI &gt;----*/<br>
<br>
template&lt;typename T&gt;<br>
std::string Convert&lt;T&gt;::id(const T& t)<br>
{<button id ="996"onclick="myFunction4();toggleText4(this.id); ">-</button><div id = "myDIV4"><br>
  return typeid(t).name();<br>
}</div><br>
<//pre><//body><//html>