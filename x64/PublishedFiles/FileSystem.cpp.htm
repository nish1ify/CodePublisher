<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - </a><br><a href = "Cpp11-BlockingQueue.cpp.htm">Cpp11-BlockingQueue.cpp - </a><br><a href = "CppProperties.cpp.htm">CppProperties.cpp - </a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - </a><br><a href = "FileSystem.h.htm">FileSystem.h - </a><br><a href = "Test2.cpp.htm">Test2.cpp - </a><br><br><br>/////////////////////////////////////////////////////////////////////////////<br>
// FileSystem.cpp - Support file and directory operations                  //<br>
// ver 2.6                                                                 //<br>
// ----------------------------------------------------------------------- //<br>
// copyright © Jim Fawcett, 2012                                           //<br>
// All rights granted provided that this notice is retained                //<br>
// ----------------------------------------------------------------------- //<br>
// Language:    Visual C++, Visual Studio 2010                             //<br>
// Platform:    Dell XPS 8300, Core i7, Windows 7 SP1                      //<br>
// Application: Summer Projects, 2012                                      //<br>
// Author:      Jim Fawcett, CST 4-187, Syracuse University                //<br>
//              (315) 443-3948, jfawcett@twcny.rr.com                      //<br>
/////////////////////////////////////////////////////////////////////////////<br>
<br>
#include &lt;iostream&gt;<br>
#include &lt;string&gt;<br>
#include &lt;sstream&gt;<br>
#include &lt;iomanip&gt;<br>
#include &lt;utility&gt;<br>
#include &lt;clocale&gt;<br>
#include &lt;locale&gt;<br>
#include "FileSystem.h"<br>
<br>
using namespace FileSystem;<br>
<br>
/////////////////////////////////////////////////////////<br>
// helper FileSystemSearch<br>
<br>
class FileSystemSearch<br>
{<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
public:<br>
  FileSystemSearch();<br>
  ~FileSystemSearch();<br>
  std::string firstFile(const std::string& path=".", const std::string& pattern="*.*");<br>
  std::string nextFile();<br>
  std::string firstDirectory(const std::string& path=".", const std::string& pattern="*.*");<br>
  std::string nextDirectory();<br>
  void close();<br>
private:<br>
  HANDLE hFindFile;<br>
  WIN32_FIND_DATAA FindFileData;<br>
  WIN32_FIND_DATAA* pFindFileData;<br>
}</div>;<br>
<br>
FileSystemSearch::FileSystemSearch() : pFindFileData(&FindFileData) {}<br>
FileSystemSearch::~FileSystemSearch() { ::FindClose(hFindFile); }<br>
void FileSystemSearch::close() { ::FindClose(hFindFile); }<br>
<br>
//----&lt; block constructor taking array iterators &gt;-------------------------<br>
<br>
Block::Block(Byte* beg, Byte* end) : bytes_(beg, end) {}<br>
<br>
//----&lt; push back block byte &gt;---------------------------------------------<br>
<br>
void Block::push_back(Byte b)<br>
{<button id ="998"onclick="myFunction2();toggleText2(this.id); ">-</button><div id = "myDIV2"><br>
  bytes_.push_back(b);<br>
}</div><br>
//----&lt; non-const indexer &gt;------------------------------------------------<br>
<br>
Byte& Block::operator[](size_t i)<br>
{<button id ="997"onclick="myFunction3();toggleText3(this.id); ">-</button><div id = "myDIV3"><br>
  if(i&lt;0 || bytes_.size() &lt;= i)<br>
    throw std::runtime_error("index out of range in Block");<br>
  return bytes_[i];<br>
}</div><br>
//----&lt; const indexer &gt;----------------------------------------------------<br>
<br>
Byte Block::operator[](size_t i) const<br>
{<button id ="996"onclick="myFunction4();toggleText4(this.id); ">-</button><div id = "myDIV4"><br>
  if(i&lt;0 || bytes_.size() &lt;= i)<br>
    throw std::runtime_error("index out of range in Block");<br>
  return bytes_[i];<br>
}</div><br>
//----&lt; equality comparison &gt;----------------------------------------------<br>
<br>
bool Block::operator==(const Block& block) const<br>
{<button id ="995"onclick="myFunction5();toggleText5(this.id); ">-</button><div id = "myDIV5"><br>
  return bytes_ == block.bytes_;<br>
}</div><br>
//----&lt; inequality comparison &gt;--------------------------------------------<br>
<br>
bool Block::operator!=(const Block& block) const<br>
{<button id ="994"onclick="myFunction6();toggleText6(this.id); ">-</button><div id = "myDIV6"><br>
  return bytes_ != block.bytes_;<br>
}</div><br>
//----&lt; return number of bytes in block &gt;----------------------------------<br>
<br>
size_t Block::size() const<br>
{<button id ="993"onclick="myFunction7();toggleText7(this.id); ">-</button><div id = "myDIV7"><br>
  return bytes_.size();<br>
}</div><br>
<br>
//----&lt; File constructor opens file stream &gt;-------------------------------<br>
<br>
File::File(const std::string& filespec) <br>
    : name_(filespec), pIStream(nullptr), pOStream(nullptr), dirn_(in), typ_(text), good_(true)<br>
{<br>
}<br>
//----&lt; File destructor closes file stream &gt;-------------------------------<br>
<br>
File::~File() <br>
{ <br>
  if(pIStream)<br>
  {<br>
    pIStream-&gt;close(); <br>
    delete pIStream;<br>
    pIStream = nullptr;<br>
    good_ = false;<br>
  }<br>
  if(pOStream)<br>
  {<br>
    pOStream-&gt;close();<br>
    delete pOStream; <br>
    pOStream = nullptr;<br>
    good_ = false;<br>
  }<br>
}</div><br>
//----&lt; open for reading or writing &gt;--------------------------------------<br>
<br>
bool File::open(direction dirn, type typ)<br>
{<button id ="992"onclick="myFunction8();toggleText8(this.id); ">-</button><div id = "myDIV8"><br>
  dirn_ = dirn;<br>
  typ_ = typ;<br>
  good_ = true;<br>
  if(dirn == in)<br>
  {<br>
    pIStream = new std::ifstream;<br>
    if(typ == binary)<br>
      pIStream-&gt;open(name_.c_str(), std::ios::in | std::ios::binary);<br>
    else<br>
      pIStream-&gt;open(name_.c_str(), std::ios::in);<br>
    if (!(*pIStream).good())<br>
    {<br>
      good_ = false;<br>
      pIStream = nullptr;<br>
      //throw std::runtime_error("\n  open for input failed in File constructor");<br>
    }<br>
  }<br>
  else<br>
  {<br>
    pOStream = new std::ofstream;<br>
    if(typ == binary)<br>
      pOStream-&gt;open(name_.c_str(), std::ios::out | std::ios::binary);<br>
    else<br>
      pOStream-&gt;open(name_.c_str(), std::ios::out);<br>
    if (!(*pOStream).good())<br>
    {<br>
      good_ = false;<br>
      pOStream = nullptr;<br>
      //throw std::runtime_error("\n  open for output failed in File constructor");<br>
    }<br>
  }<br>
  return good_;<br>
}</div><br>
//----&lt; reads one line of a text file &gt;------------------------------------<br>
<br>
std::string File::getLine(bool keepNewLines)<br>
{<button id ="991"onclick="myFunction9();toggleText9(this.id); ">-</button><div id = "myDIV9"><br>
  if(pIStream == nullptr || !pIStream-&gt;good())<br>
    throw std::runtime_error("input stream not open");<br>
  if(typ_ == binary)<br>
    throw std::runtime_error("getting text line from binary file");<br>
  if(dirn_ == out)<br>
    throw std::runtime_error("reading output file");<br>
<br>
  std::string store;<br>
  while (true)<br>
  {<br>
    char ch = pIStream-&gt;get();<br>
    if (!isGood())<br>
      return store;<br>
    if (ch == '\n')<br>
    {<br>
      if (keepNewLines)<br>
        store += ch;<br>
      return store;<br>
    }<br>
    store += ch;<br>
  }<br>
}</div><br>
//----&lt; read all lines of text file into one string &gt;----------------------<br>
<br>
std::string File::readAll(bool keepNewLines)<br>
{<button id ="990"onclick="myFunction10();toggleText10(this.id); ">-</button><div id = "myDIV10"><br>
  std::string store;<br>
  while (true)<br>
  {<br>
    if (!isGood())<br>
      return store;<br>
    store += getLine(keepNewLines);<br>
    std::locale loc;<br>
    if (store.size() &gt; 0 && !std::isspace(store[store.size() - 1], loc))<br>
      store += ' ';<br>
  }<br>
  return store;<br>
}</div><br>
//----&lt; writes one line of a text to a file &gt;------------------------------<br>
<br>
void File::putLine(const std::string& s, bool wantReturn)<br>
{<button id ="989"onclick="myFunction11();toggleText11(this.id); ">-</button><div id = "myDIV11"><br>
  if(pOStream == nullptr || !pOStream-&gt;good())<br>
    throw std::runtime_error("output stream not open");<br>
  if(typ_ == binary)<br>
    throw std::runtime_error("writing text line to binary file");<br>
  if(dirn_ == in)<br>
    throw std::runtime_error("writing input file");<br>
  for(size_t i=0; i&lt;s.size(); ++i)<br>
    pOStream-&gt;put(s[i]);<br>
  if(wantReturn)<br>
    pOStream-&gt;put('\n');<br>
  pOStream-&gt;flush();<br>
}</div><br>
//----&lt; reads a block of bytes from binary file &gt;--------------------------<br>
<br>
Block File::getBlock(size_t size)<br>
{<button id ="988"onclick="myFunction12();toggleText12(this.id); ">-</button><div id = "myDIV12"><br>
  if(pIStream == nullptr || !pIStream-&gt;good())<br>
    throw std::runtime_error("input stream not open");<br>
  if(typ_ != binary)<br>
    throw std::runtime_error("reading binary from text file");<br>
  if(dirn_ == out)<br>
    throw std::runtime_error("reading output file");<br>
  Block blk;<br>
  if(pIStream)<br>
  {<br>
    for(size_t i=0; i&lt;size; ++i)<br>
    {<br>
      Byte b;<br>
      pIStream-&gt;get(b);<br>
      if(pIStream-&gt;good())<br>
        blk.push_back(b);<br>
      else<br>
        break;<br>
    }<br>
  }<br>
  return blk;<br>
}</div><br>
//----&lt; writes a block of bytes to binary file &gt;---------------------------<br>
<br>
void File::putBlock(const Block& blk)<br>
{<button id ="987"onclick="myFunction13();toggleText13(this.id); ">-</button><div id = "myDIV13"><br>
  if(pOStream == nullptr || !pOStream-&gt;good())<br>
    throw std::runtime_error("output stream not open");<br>
  if(typ_ != binary)<br>
    throw std::runtime_error("writing binary to text file");<br>
  if(dirn_ == in)<br>
    throw std::runtime_error("writing input file");<br>
  if(!pOStream-&gt;good())<br>
    return;<br>
  for(size_t i=0; i&lt;blk.size(); ++i)<br>
  {<br>
    pOStream-&gt;put(blk[i]);<br>
  }<br>
}</div><br>
//----&lt; read buffer of bytes from binary file &gt;----------------------------<br>
<br>
size_t File::getBuffer(size_t bufLen, File::byte* buffer)<br>
{<button id ="986"onclick="myFunction14();toggleText14(this.id); ">-</button><div id = "myDIV14"><br>
  if (pIStream == nullptr || !pIStream-&gt;good())<br>
    throw std::runtime_error("input stream not open");<br>
  if (typ_ != binary)<br>
    throw std::runtime_error("reading binary from text file");<br>
  if (dirn_ == out)<br>
    throw std::runtime_error("reading output file");<br>
  size_t count = 0;<br>
  while (pIStream-&gt;good())<br>
  {<br>
    buffer[count++] = pIStream-&gt;get();<br>
      if (count == bufLen)<br>
        break;<br>
  }<br>
  if (!pIStream-&gt;good())  // don't write EOF char<br>
    --count;<br>
  return count;<br>
}</div><br>
//----&lt; write buffer of bytes to binary file &gt;-------------------------------<br>
<br>
void File::putBuffer(size_t bufLen, File::byte* buffer)<br>
{<button id ="985"onclick="myFunction15();toggleText15(this.id); ">-</button><div id = "myDIV15"><br>
  if (pOStream == nullptr || !pOStream-&gt;good())<br>
    throw std::runtime_error("output stream not open");<br>
  if (typ_ != binary)<br>
    throw std::runtime_error("writing binary to text file");<br>
  if (dirn_ == in)<br>
    throw std::runtime_error("writing input file");<br>
  if (!pOStream-&gt;good())<br>
    return;<br>
  size_t count = 0;<br>
  while(pOStream-&gt;good())<br>
  {<br>
    pOStream-&gt;put(buffer[count++]);<br>
    if (count == bufLen)<br>
      break;<br>
  }<br>
}</div><br>
//----&lt; tests for error free stream state &gt;--------------------------------<br>
<br>
bool File::isGood()<br>
{<button id ="984"onclick="myFunction16();toggleText16(this.id); ">-</button><div id = "myDIV16"><br>
  if(!good_)<br>
    return false;<br>
  if(pIStream != nullptr)<br>
    return (good_ = pIStream-&gt;good());<br>
  if(pOStream != nullptr)<br>
    return (good_ = pOStream-&gt;good());<br>
  return (good_ = false);<br>
}</div><br>
//----&lt; flushes output stream to its file &gt;--------------------------------<br>
<br>
void File::flush()<br>
{<button id ="983"onclick="myFunction17();toggleText17(this.id); ">-</button><div id = "myDIV17"><br>
  if(pOStream != nullptr && pOStream-&gt;good())<br>
    pOStream-&gt;flush();<br>
}</div><br>
//----&lt; clears error state enabling operations again &gt;---------------------<br>
<br>
void File::clear()<br>
{<button id ="982"onclick="myFunction18();toggleText18(this.id); ">-</button><div id = "myDIV18"><br>
  if(pIStream != nullptr)<br>
    pIStream-&gt;clear();<br>
  if(pOStream != nullptr)<br>
    pOStream-&gt;clear();<br>
}</div><br>
//----&lt; close file handle &gt;------------------------------------------------<br>
<br>
void File::close()<br>
{<button id ="981"onclick="myFunction19();toggleText19(this.id); ">-</button><div id = "myDIV19"><br>
  File::flush();<br>
  if (pIStream != nullptr)<br>
  {<br>
    pIStream-&gt;close();<br>
    pIStream = nullptr;<br>
    good_ = false;<br>
  }<br>
  if (pOStream)<br>
  {<br>
    pOStream-&gt;close();<br>
    pOStream = nullptr;<br>
    good_ = false;<br>
  }<br>
}</div><br>
//----&lt; file exists &gt;--------------------------------------------------<br>
<br>
bool File::exists(const std::string& file)<br>
{<button id ="980"onclick="myFunction20();toggleText20(this.id); ">-</button><div id = "myDIV20"><br>
  return ::GetFileAttributesA(file.c_str()) != INVALID_FILE_ATTRIBUTES;<br>
}</div><br>
//----&lt; copy file &gt;----------------------------------------------------<br>
<br>
bool File::copy(const std::string& src, const std::string& dst, bool failIfExists)<br>
{<button id ="979"onclick="myFunction21();toggleText21(this.id); ">-</button><div id = "myDIV21"><br>
  return ::CopyFileA(src.c_str(), dst.c_str(), failIfExists) != 0;<br>
}</div><br>
//----&lt; remove file &gt;--------------------------------------------------<br>
<br>
bool File::remove(const std::string& file)<br>
{<button id ="978"onclick="myFunction22();toggleText22(this.id); ">-</button><div id = "myDIV22"><br>
  return ::DeleteFileA(file.c_str()) != 0;<br>
}</div><br>
//----&lt; constructor &gt;--------------------------------------------------<br>
<br>
FileInfo::FileInfo(const std::string& fileSpec)<br>
{<button id ="977"onclick="myFunction23();toggleText23(this.id); ">-</button><div id = "myDIV23"><br>
  HANDLE hFile = ::FindFirstFileA(fileSpec.c_str(), &data);<br>
  if(hFile == INVALID_HANDLE_VALUE)<br>
    good_ = false;<br>
  else<br>
    good_ = true;<br>
}</div><br>
//----&lt; is passed filespec valid? &gt;------------------------------------<br>
<br>
bool FileInfo::good()<br>
{<button id ="976"onclick="myFunction24();toggleText24(this.id); ">-</button><div id = "myDIV24"><br>
  return good_;<br>
}</div><br>
//----&lt; return file name &gt;---------------------------------------------<br>
<br>
std::string FileInfo::name() const<br>
{<button id ="975"onclick="myFunction25();toggleText25(this.id); ">-</button><div id = "myDIV25"><br>
  return Path::getName(data.cFileName);<br>
}</div><br>
//----&lt; conversion helper &gt;--------------------------------------------<br>
<br>
std::string FileInfo::intToString(long i)<br>
{<button id ="974"onclick="myFunction26();toggleText26(this.id); ">-</button><div id = "myDIV26"><br>
  std::ostringstream out;<br>
  out.fill('0');<br>
  out &lt;&lt; std::setw(2) &lt;&lt; i;<br>
  return out.str();<br>
}</div><br>
//----&lt; return file date &gt;---------------------------------------------<br>
<br>
std::string FileInfo::date(dateFormat df) const<br>
{<button id ="973"onclick="myFunction27();toggleText27(this.id); ">-</button><div id = "myDIV27"><br>
  std::string dateStr, timeStr;<br>
  FILETIME ft;<br>
  SYSTEMTIME st;<br>
  ::FileTimeToLocalFileTime(&data.ftLastWriteTime, &ft);<br>
  ::FileTimeToSystemTime(&ft, &st);<br>
  dateStr = intToString(st.wMonth) + '/' + intToString(st.wDay) + '/' + intToString(st.wYear);<br>
  timeStr = intToString(st.wHour) + ':' + intToString(st.wMinute) + ':' + intToString(st.wSecond);<br>
  if(df == dateformat)<br>
    return dateStr;<br>
  if(df == timeformat)<br>
    return timeStr;<br>
  return dateStr + " " + timeStr;<br>
}</div><br>
//----&lt; return file size &gt;---------------------------------------------<br>
<br>
size_t FileInfo::size() const<br>
{<button id ="972"onclick="myFunction28();toggleText28(this.id); ">-</button><div id = "myDIV28"><br>
  return (size_t)(data.nFileSizeLow + (data.nFileSizeHigh &lt;&lt; 8));<br>
}</div><br>
//----&lt; is type archive? &gt;---------------------------------------------<br>
<br>
bool FileInfo::isArchive() const<br>
{<button id ="971"onclick="myFunction29();toggleText29(this.id); ">-</button><div id = "myDIV29"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_ARCHIVE) != 0;<br>
}</div><br>
//----&lt; is type compressed? &gt;------------------------------------------<br>
<br>
bool FileInfo::isCompressed() const<br>
{<button id ="970"onclick="myFunction30();toggleText30(this.id); ">-</button><div id = "myDIV30"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_COMPRESSED) != 0;<br>
}</div><br>
//----&lt; is type directory? &gt;-------------------------------------------<br>
<br>
bool FileInfo::isDirectory() const<br>
{<button id ="969"onclick="myFunction31();toggleText31(this.id); ">-</button><div id = "myDIV31"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0;<br>
}</div><br>
//----&lt; is type encrypted? &gt;---------------------------------------------<br>
<br>
bool FileInfo::isEncrypted() const<br>
{<button id ="968"onclick="myFunction32();toggleText32(this.id); ">-</button><div id = "myDIV32"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_ENCRYPTED) != 0;<br>
}</div><br>
//----&lt; is type hiddent? &gt;---------------------------------------------<br>
<br>
bool FileInfo::isHidden() const<br>
{<button id ="967"onclick="myFunction33();toggleText33(this.id); ">-</button><div id = "myDIV33"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_HIDDEN) != 0;<br>
}</div><br>
//----&lt; is type normal? &gt;---------------------------------------------<br>
<br>
bool FileInfo::isNormal() const<br>
{<button id ="966"onclick="myFunction34();toggleText34(this.id); ">-</button><div id = "myDIV34"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_NORMAL) != 0;<br>
}</div><br>
//----&lt; is type offline? &gt;---------------------------------------------<br>
<br>
bool FileInfo::isOffLine() const<br>
{<button id ="965"onclick="myFunction35();toggleText35(this.id); ">-</button><div id = "myDIV35"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_OFFLINE) != 0;<br>
}</div><br>
//----&lt; is type readonly? &gt;--------------------------------------------<br>
<br>
bool FileInfo::isReadOnly() const<br>
{<button id ="964"onclick="myFunction36();toggleText36(this.id); ">-</button><div id = "myDIV36"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_READONLY) != 0;<br>
}</div><br>
//----&lt; is type system? &gt;----------------------------------------------<br>
<br>
bool FileInfo::isSystem() const<br>
{<button id ="963"onclick="myFunction37();toggleText37(this.id); ">-</button><div id = "myDIV37"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_SYSTEM  ) != 0;<br>
}</div><br>
//----&lt; is type temporary? &gt;-------------------------------------------<br>
<br>
bool FileInfo::isTemporary() const<br>
{<button id ="962"onclick="myFunction38();toggleText38(this.id); ">-</button><div id = "myDIV38"><br>
  return (data.dwFileAttributes & FILE_ATTRIBUTE_TEMPORARY) != 0;<br>
}</div><br>
//----&lt; compare names alphabetically &gt;---------------------------------<br>
<br>
bool FileInfo::operator&lt;(const FileInfo& fi) const<br>
{<button id ="961"onclick="myFunction39();toggleText39(this.id); ">-</button><div id = "myDIV39"><br>
  return strcmp(data.cFileName, fi.data.cFileName) == -1;<br>
}</div><br>
//----&lt; compare names alphabetically &gt;---------------------------------<br>
<br>
bool FileInfo::operator==(const FileInfo& fi) const<br>
{<button id ="960"onclick="myFunction40();toggleText40(this.id); ">-</button><div id = "myDIV40"><br>
  return strcmp(data.cFileName, fi.data.cFileName) == 0;<br>
}</div><br>
//----&lt; compare names alphabetically &gt;---------------------------------<br>
<br>
bool FileInfo::operator&gt;(const FileInfo& fi) const<br>
{<button id ="959"onclick="myFunction41();toggleText41(this.id); ">-</button><div id = "myDIV41"><br>
  return strcmp(data.cFileName, fi.data.cFileName) == 1;<br>
}</div><br>
//----&lt; compare file times &gt;-------------------------------------------<br>
<br>
bool FileInfo::earlier(const FileInfo& fi) const<br>
{<button id ="958"onclick="myFunction42();toggleText42(this.id); ">-</button><div id = "myDIV42"><br>
  FILETIME ft1 = data.ftLastWriteTime;<br>
  FILETIME ft2 = fi.data.ftLastWriteTime;<br>
  return ::CompareFileTime(&ft1, &ft2) == -1;<br>
}</div><br>
//----&lt; compare file times &gt;-------------------------------------------<br>
<br>
bool FileInfo::later(const FileInfo& fi) const<br>
{<button id ="957"onclick="myFunction43();toggleText43(this.id); ">-</button><div id = "myDIV43"><br>
  FILETIME ft1 = data.ftLastWriteTime;<br>
  FILETIME ft2 = fi.data.ftLastWriteTime;<br>
  return ::CompareFileTime(&ft1, &ft2) == 1;<br>
}</div><br>
//----&lt; smaller &gt;------------------------------------------------------<br>
<br>
bool FileInfo::smaller(const FileInfo &fi) const<br>
{<button id ="956"onclick="myFunction44();toggleText44(this.id); ">-</button><div id = "myDIV44"><br>
  return size() &lt; fi.size();<br>
}</div><br>
//----&lt; larger &gt;-------------------------------------------------------<br>
<br>
bool FileInfo::larger(const FileInfo &fi) const<br>
{<button id ="955"onclick="myFunction45();toggleText45(this.id); ">-</button><div id = "myDIV45"><br>
  return size() &gt; fi.size();<br>
}</div><br>
//----&lt; convert string to lower case chars &gt;---------------------------<br>
<br>
std::string Path::toLower(const std::string& src)<br>
{<button id ="954"onclick="myFunction46();toggleText46(this.id); ">-</button><div id = "myDIV46"><br>
  std::string temp;<br>
  for(size_t i=0; i&lt;src.length(); ++i)<br>
    temp += tolower(src[i]);<br>
  return temp;<br>
}</div><br>
//----&lt; convert string to upper case chars &gt;---------------------------<br>
<br>
  <br>
std::string Path::toUpper(const std::string& src)<br>
{<button id ="953"onclick="myFunction47();toggleText47(this.id); ">-</button><div id = "myDIV47"><br>
  std::string temp;<br>
  for(size_t i=0; i&lt;src.length(); ++i)<br>
    temp += toupper(src[i]);<br>
  return temp;<br>
}</div><br>
//----&lt; get path from fileSpec &gt;---------------------------------------<br>
<br>
std::string Path::getName(const std::string &fileSpec, bool withExt)<br>
{<button id ="952"onclick="myFunction48();toggleText48(this.id); ">-</button><div id = "myDIV48"><br>
  size_t pos = fileSpec.find_last_of("/");<br>
  if(pos &gt;= fileSpec.length())<br>
  {<br>
    pos = fileSpec.find_last_of("\\");<br>
    if(pos &gt;= fileSpec.length())<br>
    {<br>
      // no path prepended<br>
      if(withExt)<br>
        return fileSpec;<br>
      else<br>
      {<br>
        // remove ext<br>
        size_t pos = fileSpec.find(".");<br>
        if(pos &gt; fileSpec.size())<br>
          return fileSpec;<br>
        return fileSpec.substr(0, pos-1);<br>
      }<br>
    }<br>
  }<br>
  if(withExt)<br>
    return fileSpec.substr(pos+1,fileSpec.length()-pos);<br>
  else<br>
  {<br>
    // remove ext<br>
    size_t pos2 = fileSpec.find(".", pos);<br>
    if(pos2 &gt; fileSpec.size())<br>
      // no ext<br>
      return fileSpec.substr(pos+1);<br>
    return fileSpec.substr(pos+1, pos2-pos-1);<br>
  }<br>
}</div><br>
//----&lt; get extension from fileSpec &gt;----------------------------------<br>
  <br>
std::string Path::getExt(const std::string& fileSpec)<br>
{<button id ="951"onclick="myFunction49();toggleText49(this.id); ">-</button><div id = "myDIV49"><br>
  size_t pos1 = fileSpec.find_last_of('/');<br>
  size_t pos2 = fileSpec.find_last_of('\\');<br>
  size_t pos = fileSpec.find_last_of('.');<br>
  // handle ../ or ..\\ with no extension<br>
  if(pos1 &lt; fileSpec.length() || pos2 &lt; fileSpec.length())<br>
  {<br>
    if(pos &lt; min(pos1, pos2))<br>
      return std::string("");<br>
  }<br>
  // only . is extension delimiter<br>
  if(0 &lt;= pos && pos &lt; fileSpec.length())<br>
    return toLower(fileSpec.substr(pos+1,fileSpec.length()-pos));<br>
  return std::string("");<br>
}</div><br>
//----&lt; get path from fileSpec &gt;---------------------------------------<br>
<br>
std::string Path::getPath(const std::string &fileSpec)<br>
{<button id ="950"onclick="myFunction50();toggleText50(this.id); ">-</button><div id = "myDIV50"><br>
  size_t pos = fileSpec.find_last_of("/");<br>
  if(pos &gt;= fileSpec.length())<br>
    pos = fileSpec.find_last_of("\\");<br>
  if(pos &gt;= fileSpec.length())<br>
    return ".";<br>
  if(fileSpec.find(".",pos+1))<br>
    return fileSpec.substr(0,pos+1);<br>
  return fileSpec;<br>
}</div><br>
//----&lt; get absoluth path from fileSpec &gt;------------------------------<br>
<br>
std::string Path::getFullFileSpec(const std::string &fileSpec)<br>
{<button id ="949"onclick="myFunction51();toggleText51(this.id); ">-</button><div id = "myDIV51"><br>
  const size_t BufSize = 256;<br>
  char buffer[BufSize];<br>
  char filebuffer[BufSize];  // don't use but GetFullPathName will<br>
  char* name = filebuffer;<br>
  ::GetFullPathNameA(fileSpec.c_str(),BufSize, buffer, &name);<br>
  return std::string(buffer);<br>
}</div><br>
//----&lt; create file spec from path and name &gt;--------------------------<br>
<br>
std::string Path::fileSpec(const std::string &path, const std::string &name)<br>
{<button id ="948"onclick="myFunction52();toggleText52(this.id); ">-</button><div id = "myDIV52"><br>
  std::string fs;<br>
  size_t len = path.size();<br>
  if(path[len-1] == '/' || path[len-1] == '\\')<br>
    fs = path + name;<br>
  else<br>
  {<br>
    if(path.find("/") &lt; path.size())<br>
      fs = path + "/" + name;<br>
    else if(path.find("\\") &lt; path.size())<br>
      fs = path + "\\" + name;<br>
    else<br>
      fs = path + "/" + name;<br>
  }<br>
  return fs;<br>
}</div><br>
//----&lt; return name of the current directory &gt;-----------------------------<br>
<br>
std::string Directory::getCurrentDirectory()<br>
{<button id ="947"onclick="myFunction53();toggleText53(this.id); ">-</button><div id = "myDIV53"><br>
  char buffer[MAX_PATH];<br>
  ::GetCurrentDirectoryA(MAX_PATH,buffer);<br>
  return std::string(buffer);<br>
}</div><br>
//----&lt; change the current directory to path &gt;-----------------------------<br>
<br>
bool Directory::setCurrentDirectory(const std::string& path)<br>
{<button id ="946"onclick="myFunction54();toggleText54(this.id); ">-</button><div id = "myDIV54"><br>
  return ::SetCurrentDirectoryA(path.c_str()) != 0;<br>
}</div><br>
//----&lt; get names of all the files matching pattern (path:name) &gt;----------<br>
<br>
std::vector&lt;std::string&gt; Directory::getFiles(const std::string& path, const std::string& pattern)<br>
{<button id ="945"onclick="myFunction55();toggleText55(this.id); ">-</button><div id = "myDIV55"><br>
  std::vector&lt;std::string&gt; files;<br>
  FileSystemSearch fss;<br>
  std::string file = fss.firstFile(path, pattern);<br>
  if(file.size() == 0)<br>
    return files;<br>
  files.push_back(file);<br>
  while(true)<br>
  {<br>
    file = fss.nextFile();<br>
    if(file.size() == 0)<br>
      return files;<br>
    files.push_back(file);<br>
  }<br>
  return files;<br>
}</div><br>
//----&lt; get names of all directories matching pattern (path:name) &gt;--------<br>
<br>
std::vector&lt;std::string&gt; Directory::getDirectories(const std::string& path, const std::string& pattern)<br>
{<button id ="944"onclick="myFunction56();toggleText56(this.id); ">-</button><div id = "myDIV56"><br>
  std::vector&lt;std::string&gt; dirs;<br>
  FileSystemSearch fss;<br>
  std::string dir = fss.firstDirectory(path, pattern);<br>
  if(dir.size() == 0)<br>
    return dirs;<br>
  dirs.push_back(dir);<br>
  while(true)<br>
  {<br>
    dir = fss.nextDirectory();<br>
    if(dir.size() == 0)<br>
      return dirs;<br>
    dirs.push_back(dir);<br>
  }<br>
  return dirs;<br>
}</div><br>
//----&lt; create directory &gt;-------------------------------------------------<br>
<br>
bool Directory::create(const std::string& path)<br>
{<button id ="943"onclick="myFunction57();toggleText57(this.id); ">-</button><div id = "myDIV57"><br>
  return ::CreateDirectoryA(path.c_str(), NULL) == 0;<br>
}</div><br>
//----&lt; does directory exist? &gt;--------------------------------------------<br>
<br>
bool Directory::exists(const std::string& path)<br>
{<button id ="942"onclick="myFunction58();toggleText58(this.id); ">-</button><div id = "myDIV58"><br>
  DWORD dwAttrib = GetFileAttributesA(path.c_str());<br>
<br>
  return (dwAttrib != INVALID_FILE_ATTRIBUTES && <br>
         (dwAttrib & FILE_ATTRIBUTE_DIRECTORY));<br>
}</div><br>
//----&lt; remove directory &gt;-------------------------------------------------<br>
<br>
bool Directory::remove(const std::string& path)<br>
{<button id ="941"onclick="myFunction59();toggleText59(this.id); ">-</button><div id = "myDIV59"><br>
  return ::RemoveDirectoryA(path.c_str()) == 0;<br>
}</div><br>
//----&lt; find first file &gt;--------------------------------------------------<br>
<br>
std::string FileSystemSearch::firstFile(const std::string& path, const std::string& pattern)<br>
{<button id ="940"onclick="myFunction60();toggleText60(this.id); ">-</button><div id = "myDIV60"><br>
  hFindFile = ::FindFirstFileA(Path::fileSpec(path, pattern).c_str(), pFindFileData);<br>
  if(hFindFile != INVALID_HANDLE_VALUE)<br>
  {<br>
    if(!(pFindFileData-&gt;dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))<br>
      return pFindFileData-&gt;cFileName;<br>
    else<br>
      while(::FindNextFileA(hFindFile, pFindFileData))<br>
        if(!(pFindFileData-&gt;dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))<br>
          return pFindFileData-&gt;cFileName;<br>
  }<br>
  return "";<br>
}</div><br>
//----&lt; find next file &gt;---------------------------------------------------<br>
<br>
std::string FileSystemSearch::nextFile()<br>
{<button id ="939"onclick="myFunction61();toggleText61(this.id); ">-</button><div id = "myDIV61"><br>
  while(::FindNextFileA(hFindFile, pFindFileData))<br>
    if(!(pFindFileData-&gt;dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))<br>
      return pFindFileData-&gt;cFileName;<br>
  return "";<br>
}</div><br>
//----&lt; find first file &gt;--------------------------------------------------<br>
<br>
std::string FileSystemSearch::firstDirectory(const std::string& path, const std::string& pattern)<br>
{<button id ="938"onclick="myFunction62();toggleText62(this.id); ">-</button><div id = "myDIV62"><br>
  hFindFile = ::FindFirstFileA(Path::fileSpec(path, pattern).c_str(), pFindFileData);<br>
  if(hFindFile != INVALID_HANDLE_VALUE)<br>
  {<br>
    if(pFindFileData-&gt;dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)<br>
      return pFindFileData-&gt;cFileName;<br>
    else<br>
      while(::FindNextFileA(hFindFile, pFindFileData))<br>
        if(pFindFileData-&gt;dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)<br>
          return pFindFileData-&gt;cFileName;<br>
  }<br>
  return "";<br>
}</div><br>
//----&lt; find next file &gt;---------------------------------------------------<br>
<br>
std::string FileSystemSearch::nextDirectory()<br>
{<button id ="937"onclick="myFunction63();toggleText63(this.id); ">-</button><div id = "myDIV63"><br>
  while(::FindNextFileA(hFindFile, pFindFileData))<br>
    if(pFindFileData-&gt;dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)<br>
      return pFindFileData-&gt;cFileName;<br>
  return "";<br>
}</div><br>
//----&lt; test stub &gt;--------------------------------------------------------<br>
<br>
#ifdef TEST_FILESYSTEM<br>
<br>
void title(const std::string& title, char ch='=')<br>
{<button id ="936"onclick="myFunction64();toggleText64(this.id); ">-</button><div id = "myDIV64"><br>
  std::cout &lt;&lt; "\n  " &lt;&lt; title;<br>
  std::cout &lt;&lt; "\n " &lt;&lt; std::string(title.size()+2, ch);<br>
}</div><br>
int main(int argc, char* argv[])<br>
{<button id ="935"onclick="myFunction65();toggleText65(this.id); ">-</button><div id = "myDIV65"><br>
  title("Demonstrate Path Class");<br>
<br>
  std::string fs = Path::fileSpec(".","temp.txt");<br>
  std::cout &lt;&lt; "\n  Path::fileSpec(\".\",\"temp.txt\") = " &lt;&lt; fs;<br>
<br>
  std::string path = Path::getPath(fs);<br>
  std::cout &lt;&lt; "\n  Path::getPath(\"" + fs + "\") = " &lt;&lt; path;<br>
  <br>
  std::string ffs = Path::getFullFileSpec(fs);<br>
  std::cout &lt;&lt; "\n  Path::getFullFileSpec(\"" + fs + "\") = " &lt;&lt; ffs;<br>
  <br>
  std::string name = Path::getName(fs);<br>
  std::cout &lt;&lt; "\n  Path::getName(\"" + fs + "\") = " &lt;&lt; name;<br>
<br>
  std::string ext = Path::getExt(fs);<br>
  std::cout &lt;&lt; "\n  Path::getExt(\"" + fs + "\") = " &lt;&lt; ext;<br>
<br>
  std::string upper = Path::toUpper("temp.txt");<br>
  std::cout &lt;&lt; "\n  Path::toUpper(\"temp.txt\") = " &lt;&lt; upper;<br>
<br>
  std::string lower = Path::toLower("Temp.Txt");<br>
  std::cout &lt;&lt; "\n  Path::toLower(\"Temp.Txt\") = " &lt;&lt; lower;<br>
  std::cout &lt;&lt; std::endl;<br>
  /*<br>
  title("Demonstrate FileSystemSearch class");<br>
<br>
  const size_t PathSetSize = 2;<br>
  std::string home = ::getenv("HOMEDRIVE");<br>
  std::string pathSet[] = { home+"\\\\", "." };<br>
  FileSystemSearch fss;<br>
  for(size_t i = 0; i&lt;PathSetSize; ++i)<br>
  {<br>
    std::cout &lt;&lt; "\n  searching for files on \"" &lt;&lt; pathSet[i] &lt;&lt; "\"";<br>
    std::cout &lt;&lt; "\n " &lt;&lt; std::string(27 + pathSet[i].size(), '-');<br>
    std::string searchPath = pathSet[i];<br>
    std::string fileName = fss.firstFile(searchPath);<br>
    if(fileName.size() &gt; 0)<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fileName;<br>
    else<br>
      std::cout &lt;&lt; "\n  no files match search";<br>
    while(true) {<br>
      fileName = fss.nextFile();<br>
      if(fileName.size() &gt; 0)<br>
        std::cout &lt;&lt; "\n  " &lt;&lt; fileName;<br>
      else<br>
        break;<br>
    }<br>
    std::cout &lt;&lt; std::endl;<br>
<br>
    std::cout &lt;&lt; "\n  searching for directories on \"" &lt;&lt; pathSet[i] &lt;&lt; "\"";<br>
    std::cout &lt;&lt; "\n " &lt;&lt; std::string(33 + pathSet[i].size(), '-');<br>
    std::string dirName = fss.firstDirectory(searchPath);<br>
    if(dirName.size() &gt; 0)<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; dirName;<br>
    else<br>
      std::cout &lt;&lt; "\n  no directories match search";<br>
    while(true)<br>
    {<br>
      dirName = fss.nextDirectory();<br>
      if(dirName.size() &gt; 0)<br>
        std::cout &lt;&lt; "\n  " &lt;&lt; dirName;<br>
      else<br>
        break;<br>
    }<br>
    std::cout &lt;&lt; std::endl;<br>
  }<br>
  */<br>
  title("Demonstrate Directory class");<br>
<br>
  // Display contents of current directory<br>
<br>
  std::cout &lt;&lt; "\n  current directory is:\n    " &lt;&lt; Directory::getCurrentDirectory();<br>
  std::cout &lt;&lt; "\n  It contains files:";<br>
  std::vector&lt;std::string&gt; currfiles = Directory::getFiles();<br>
  ///////////////////////////////////////////////////////<br>
  // This works too<br>
  // std::vector&lt;std::string&gt; currfiles = d.getFiles();  <br>
  for(size_t i=0; i&lt;currfiles.size(); ++i)<br>
    std::cout &lt;&lt; "\n    " &lt;&lt; currfiles[i].c_str();<br>
  std::cout &lt;&lt; "\n  and contains directories:";<br>
  std::vector&lt;std::string&gt; currdirs = Directory::getDirectories();<br>
  for(size_t i=0; i&lt;currdirs.size(); ++i)<br>
    std::cout &lt;&lt; "\n    " &lt;&lt; currdirs[i].c_str();<br>
  std::cout &lt;&lt; "\n";<br>
<br>
  // Display contents of non-current directory<br>
<br>
  std::cout &lt;&lt; "\n  .txt files residing in C:/temp are:";<br>
  currfiles = Directory::getFiles("c:/temp/", "*.txt");<br>
<br>
  // if we want fully qualified file names, we have to<br>
  // set the current directory to the path on which the files<br>
  // reside, if it isn't already so set<br>
<br>
  std::string currDir = Directory::getCurrentDirectory();<br>
  Directory::setCurrentDirectory("c:/temp/");<br>
  for(size_t i=0; i&lt;currfiles.size(); ++i)<br>
    std::cout &lt;&lt; "\n    " &lt;&lt; Path::getFullFileSpec(currfiles[i]).c_str();<br>
  Directory::setCurrentDirectory(currDir);<br>
<br>
  // we have to restore the current directory so the<br>
  // remaining tests work<br>
<br>
  // it's probably easier just to use Path::fileSpec(path, filename)<br>
  // like this:<br>
<br>
  for (size_t i = 0; i&lt;currfiles.size(); ++i)<br>
    std::cout &lt;&lt; "\n    " &lt;&lt; Path::fileSpec("c:\\temp\\", currfiles[i]).c_str();<br>
<br>
  std::cout &lt;&lt; "\n";<br>
  std::cout &lt;&lt; "\n  directories residing in C:/temp are:";<br>
  currdirs = Directory::getDirectories("c:/temp/");<br>
  for(size_t i=0; i&lt;currdirs.size(); ++i)<br>
    std::cout &lt;&lt; "\n    " &lt;&lt; currdirs[i].c_str();<br>
  std::cout &lt;&lt; "\n";<br>
<br>
  // Create directory<br>
<br>
  title("Demonstrate FileInfo Class Operations", '=');<br>
  std::cout &lt;&lt; "\n";<br>
<br>
  Directory::setCurrentDirectory(".");<br>
  std::cout &lt;&lt; "\n  current path is \"" &lt;&lt; Directory::getCurrentDirectory();<br>
  <br>
  std::string fn1;<br>
  if(argc &gt; 1)<br>
    fn1 = argv[1];<br>
  else<br>
    fn1 = "c:\\temp\\test.txt";<br>
  FileInfo fi(fn1);<br>
<br>
  if(fi.good())<br>
  {<br>
    std::cout &lt;&lt; "\n  name: " &lt;&lt; "\t" &lt;&lt; fi.name();<br>
    std::cout &lt;&lt; "\n  date: " &lt;&lt; "\t" &lt;&lt; fi.date();<br>
    std::cout &lt;&lt; "\n  date: " &lt;&lt; "\t" &lt;&lt; fi.date(FileInfo::dateformat);<br>
    std::cout &lt;&lt; "\n  date: " &lt;&lt; "\t" &lt;&lt; fi.date(FileInfo::timeformat);<br>
    std::cout &lt;&lt; "\n  size: " &lt;&lt; "\t" &lt;&lt; fi.size() &lt;&lt; " bytes";<br>
    if(fi.isArchive())<br>
      std::cout &lt;&lt; "\n  is archive";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not archive";<br>
    if(fi.isCompressed())<br>
      std::cout &lt;&lt; "\n  is compressed";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not compressed";<br>
    if(fi.isDirectory())<br>
      std::cout &lt;&lt; "\n  is directory";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not directory";<br>
    if(fi.isEncrypted())<br>
      std::cout &lt;&lt; "\n  is encrypted";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not encrypted";<br>
    if(fi.isHidden())<br>
      std::cout &lt;&lt; "\n  is hidden";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not hidden";<br>
    if(fi.isNormal())<br>
      std::cout &lt;&lt; "\n  is normal";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not normal";<br>
    if(fi.isOffLine())<br>
      std::cout &lt;&lt; "\n  is offline";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not offline";<br>
    if(fi.isReadOnly())<br>
      std::cout &lt;&lt; "\n  is readonly";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not readonly";<br>
    if(fi.isSystem())<br>
      std::cout &lt;&lt; "\n  is system";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not system";<br>
    if(fi.isTemporary())<br>
      std::cout &lt;&lt; "\n  is temporary";<br>
    else<br>
      std::cout &lt;&lt; "\n  is not temporary";<br>
  }<br>
  else<br>
    std::cout &lt;&lt; "\n  filename " &lt;&lt; fn1 &lt;&lt; " is not valid in this context\n";<br>
<br>
  std::string fn2;<br>
  if(argc &gt; 2)<br>
  {<br>
    fn1 = argv[1];<br>
    fn2 = argv[2];<br>
  }<br>
  else<br>
  {<br>
    fn1 = "FileSystem.h";<br>
    fn2 = "FileSystem.cpp";<br>
  }<br>
  FileInfo fi1(fn1);<br>
  FileInfo fi2(fn2);<br>
  if(fi1.good() && fi2.good())<br>
  {<br>
    if(fi1 == fi1)<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " == " &lt;&lt; fi1.name();<br>
    else<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " != " &lt;&lt; fi1.name();<br>
    if(fi1 &lt; fi1)<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " &lt; " &lt;&lt; fi1.name();<br>
    else<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " &gt;= " &lt;&lt; fi1.name();<br>
    if(fi1 == fi2)<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " == " &lt;&lt; fi2.name();<br>
    else<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " != " &lt;&lt; fi2.name();<br>
    if(fi1 &lt; fi2)<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " &lt; " &lt;&lt; fi2.name();<br>
    else<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " &gt;= " &lt;&lt; fi2.name();<br>
    if(fi1.smaller(fi2))<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " is smaller than " &lt;&lt; fi2.name();<br>
    else<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " is not smaller than " &lt;&lt; fi2.name();<br>
    if(fi1.earlier(fi2))<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " is earlier than " &lt;&lt; fi2.name();<br>
    else<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; fi1.name() &lt;&lt; " is not earlier than " &lt;&lt; fi2.name();<br>
    std::cout &lt;&lt; std::endl;<br>
  }<br>
  else<br>
    std::cout &lt;&lt; "\n  files " &lt;&lt; fn1 &lt;&lt; " and " &lt;&lt; fn2 &lt;&lt; " are not valid in this context\n";<br>
<br>
  title("Demonstrate File class operations", '=');<br>
  std::cout &lt;&lt; "\n";<br>
<br>
  // copy binary file from one directory to another<br>
<br>
  File me("../debug/filesystemdemo.exe");<br>
  me.open(File::in, File::binary);<br>
  std::cout &lt;&lt; "\n  copying " &lt;&lt; me.name().c_str() &lt;&lt; " to c:/temp";<br>
  if(!me.isGood())<br>
  {<br>
    std::cout &lt;&lt; "\n  can't open executable\n";<br>
    std::cout &lt;&lt; "\n  looking for:\n  ";<br>
    std::cout &lt;&lt; Path::getFullFileSpec(me.name()) &lt;&lt; "\n";<br>
  }<br>
  else<br>
  {<br>
    File you("c:/temp/fileSystemdemo.exe");<br>
    you.open(File::out, File::binary);<br>
    if(you.isGood())<br>
    {<br>
      while(me.isGood())<br>
      {<br>
        static size_t count = 0;<br>
        Block b = me.getBlock(1024);<br>
        you.putBlock(b);<br>
        if (++count &lt; 10)<br>
        {<br>
          std::cout &lt;&lt; "\n    reading block of " &lt;&lt; b.size() &lt;&lt; " bytes";<br>
          std::cout &lt;&lt; "\n    writing block of " &lt;&lt; b.size() &lt;&lt; " bytes";<br>
        }<br>
        if (b.size() &lt; 1024)<br>
        {<br>
          std::cout &lt;&lt; "\n\n    omitted " &lt;&lt; count-10 &lt;&lt; " blocks from display\n\n";<br>
          std::cout &lt;&lt; "\n    reading block of " &lt;&lt; b.size() &lt;&lt; " bytes";<br>
          std::cout &lt;&lt; "\n    writing block of " &lt;&lt; b.size() &lt;&lt; " bytes";<br>
        }<br>
      }<br>
      std::cout &lt;&lt; "\n";<br>
    }<br>
  }<br>
<br>
  // save some filespecs of text files in a vector for File demonstrations<br>
<br>
  std::vector&lt;std::string&gt; files;<br>
  if(argc == 1)<br>
  {<br>
    std::cout &lt;&lt; "\n\n  Enter, on the command line, an additional filename to process.\n";<br>
  }<br>
<br>
  for(int i=1; i&lt;argc; ++i)<br>
  {<br>
    files.push_back(argv[i]);<br>
  }<br>
  files.push_back("FileSystem.cpp");                     // file not on current path<br>
  files.push_back("../FileSystemDemo/FileSystem.cpp");   // file from project directory<br>
  files.push_back("../FileSystemTest.txt");              // file in solution directory<br>
  files.push_back("foobar");                             // doesn't exist<br>
<br>
  // open each file and display a few lines of text<br>
<br>
  for(size_t i=0; i&lt;files.size(); ++i)<br>
  {<br>
    File file(files[i]);<br>
    file.open(File::in);<br>
    if(!file.isGood())<br>
    {<br>
      std::cout &lt;&lt; "\n  Can't open file " &lt;&lt; file.name();<br>
      std::cout &lt;&lt; "\n  Here's what the program can't find:\n  " &lt;&lt; Path::getFullFileSpec(file.name()); <br>
      continue;<br>
    }<br>
    std::string temp = std::string("Processing file ") + files[i];<br>
    title(temp, '-');<br>
    for(int j=0; j&lt;10; ++j)<br>
    {<br>
      if(!file.isGood())<br>
        break;<br>
      std::cout &lt;&lt; "\n  -- " &lt;&lt; file.getLine().c_str();<br>
    }<br>
    std::cout &lt;&lt; "\n";<br>
  }<br>
  std::cout &lt;&lt; "\n";<br>
<br>
  // read all lines of text file into string<br>
<br>
  title("testing File::readAll()", '-');<br>
  std::cout &lt;&lt; "\n";<br>
  File testAll("../FileSystemTest.txt");<br>
  testAll.open(File::in);<br>
  if (testAll.isGood())<br>
  {<br>
    std::string all = testAll.readAll();<br>
    std::cout &lt;&lt; all &lt;&lt; "\n";<br>
  }<br>
  testAll.close();<br>
<br>
  title("testing File::readAll(true)", '-');<br>
  std::cout &lt;&lt; "\n";<br>
  File testAllTrue("../FileSystemTest.txt");<br>
  testAllTrue.open(File::in);<br>
  if (testAllTrue.isGood())<br>
  {<br>
    std::string all = testAllTrue.readAll(true);<br>
    std::cout &lt;&lt; all &lt;&lt; "\n";<br>
  }<br>
  testAllTrue.close();<br>
<br>
  // test reading non-text files<br>
<br>
  title("test reading non-text files", '-');<br>
  std::cout &lt;&lt; "\n";<br>
  std::string testPath = "./debug";  // run from project directory (what Visual Studio does)<br>
  if (!Directory::exists(testPath))<br>
    testPath = ".";                  // run from solution debug directory<br>
  std::vector&lt;std::string&gt; testFiles = Directory::getFiles(testPath);<br>
  for (auto file : testFiles)<br>
  {<br>
    try<br>
    {<br>
      std::string ext = Path::getExt(file);<br>
      if (ext == "exe" || ext == "dll" || file == "run.dat")<br>
      {<br>
        /* reading binary file works, but generates a lot of garbage */<br>
        /* I use run.dat to capture this output so including will make output confusing */<br>
<br>
        std::cout &lt;&lt; "  skipping binary file " &lt;&lt; file &lt;&lt; "\n";<br>
        continue;<br>
      }<br>
      File test(file);<br>
      test.open(File::in);  // open as text file<br>
      std::cout &lt;&lt; "\n  processing \"" &lt;&lt; file &lt;&lt; "\"\n";<br>
      if (test.isGood())<br>
      {<br>
        std::string text = test.readAll(true);<br>
        std::cout &lt;&lt; text &lt;&lt; "\n";<br>
      }<br>
      else<br>
      {<br>
        std::cout &lt;&lt; "\n  open failed\n";<br>
      }<br>
    }<br>
    catch (std::exception& ex)<br>
    {<br>
      std::cout &lt;&lt; "\n  Exception: " &lt;&lt; ex.what() &lt;&lt; "\n";<br>
    }<br>
  }<br>
<br>
  // read text file and write to another text file<br>
<br>
  title("writing to c:/temp/test.txt", '-');<br>
  File in("../FileSystemDemo/FileSystem.h");<br>
  in.open(File::in, File::text);<br>
  File out("c:/temp/test.txt");<br>
  out.open(File::out, File::text);<br>
  while(in.isGood())<br>
  {<br>
    std::string temp = in.getLine();<br>
    //std::cout &lt;&lt; "\n  " &lt;&lt; temp.c_str();<br>
    out.putLine(temp);<br>
    out.putLine("\n");<br>
  }<br>
  std::cout &lt;&lt; "\n  check c:/temp/test.txt to validate";<br>
  std::cout &lt;&lt; "\n\n";<br>
<br>
  // read and write buffers<br>
<br>
  title("reading and writing buffers");<br>
  std::cout &lt;&lt; "\n  " &lt;&lt; FileSystem::Directory::getCurrentDirectory();<br>
  std::string fileIn = "TestFileSystem/UnitTest.h";<br>
  std::string fileOut = "TestFileSystem/CopyOfUnitTest.h";<br>
  File bufferIn(fileIn);<br>
  bufferIn.open(File::in, File::binary);<br>
  if (!bufferIn.isGood())<br>
  {<br>
    std::cout &lt;&lt; "\n  could not open \"" &lt;&lt; fileIn &lt;&lt; "\" for reading";<br>
      return 1;<br>
  }<br>
  else<br>
  {<br>
    std::cout &lt;&lt; "\n  opening: \"" &lt;&lt; fileIn &lt;&lt; "\" for reading";<br>
  }<br>
  File bufferOut(fileOut);<br>
  bufferOut.open(File::out, File::binary);<br>
  if (!bufferOut.isGood())<br>
  {<br>
    std::cout &lt;&lt; "\n  could not open \"" &lt;&lt; fileOut &lt;&lt; "\" for writing\n\n";<br>
      return 1;<br>
  }<br>
  else<br>
  {<br>
    std::cout &lt;&lt; "\n  opening: \"" &lt;&lt; fileOut &lt;&lt; "\" for writing";<br>
  }<br>
  std::cout &lt;&lt; "\n";<br>
  const size_t bufLen = 124;<br>
  File::byte buffer[bufLen];<br>
  while (true)<br>
  {<br>
    size_t resultSize = bufferIn.getBuffer(bufLen, buffer);<br>
    //std::cout &lt;&lt; "\n  reading buffer of size " &lt;&lt; resultSize &lt;&lt; " bytes";<br>
    std::string temp1(buffer, resultSize);<br>
    std::cout &lt;&lt; temp1;<br>
    //std::cout &lt;&lt; "\n  writing buffer of size " &lt;&lt; resultSize &lt;&lt; "bytes";<br>
    bufferOut.putBuffer(resultSize, buffer);<br>
    if (resultSize &lt; bufLen || !bufferIn.isGood() || !bufferOut.isGood())<br>
    {<br>
      bufferIn.close();<br>
      bufferOut.close();<br>
      break;<br>
    }<br>
  }<br>
  std::cout &lt;&lt; "\n\n";<br>
}</div><br>
#endif<br>
<//pre><//body><//html>