<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - </a><br><a href = "GrammarHelpers.cpp.htm">GrammarHelpers.cpp - </a><br><a href = "SemiExp.h.htm">SemiExp.h - </a><br><a href = "StrHelper.h.htm">StrHelper.h - </a><br><a href = "Tokenizer.h.htm">Tokenizer.h - </a><br><a href = "itokcollection.h.htm">itokcollection.h - </a><br><br><br>#ifndef SEMIEXPRESSION_H<br>
#define SEMIEXPRESSION_H<br>
///////////////////////////////////////////////////////////////////////<br>
// SemiExpression.h - collect tokens for analysis                    //<br>
// ver 3.9                                                           //<br>
// Language:    C++, Visual Studio 2015                              //<br>
// Platform:    Dell XPS 8900, Windows 10                            //<br>
// Application: Parser component, CSE687 - Object Oriented Design    //<br>
// Author:      Jim Fawcett, Syracuse University, CST 4-187          //<br>
//              jfawcett@twcny.rr.com                                //<br>
///////////////////////////////////////////////////////////////////////<br>
/*<br>
* Package Operations:<br>
* -------------------<br>
* This package provides a public SemiExp class that collects and makes<br>
* available sequences of tokens.  SemiExp uses the services of a Toker<br>
* class to acquire tokens.  Each call to SemiExp::get() returns a <br>
* sequence of tokens that ends in {, }, ;, and '\n' if the line begins<br>
* with #.  There are three additiona termination conditions: a sequence<br>
* of tokens that ends with : and the immediately preceding token is<br>
* public, protected, or private.<br>
*<br>
* Each semiexpression returns just the right tokens to analyze one<br>
* C++ grammatical construct, e.g., class definition, function definition,<br>
* declaration, etc.<br>
* <br>
* Build Process:<br>
* --------------<br>
* Required Files: <br>
*   SemiExpression.h, SemiExpression.cpp, Tokenizer.h, Tokenizer.cpp, <br>
*   Utilities.h, Utilities.cpp<br>
* <br>
* Build Command: devenv Project1.sln /rebuild debug<br>
*<br>
* Maintenance History:<br>
* --------------------<br>
* ver 3.9 : 26 Feb 2017<br>
* - converted all uses of std::isspace from &lt;cctype&gt; to std::isspace from &lt;locale&gt;<br>
* ver 3.8 : 27 Aug 2016<br>
* - modified SemiExp::trim() to remove leading characters that are not<br>
*   alphanumerics or punctuators <br>
*   (C# adds some of these on first line of source code file)<br>
* ver 3.7 : 25 Aug 2016<br>
* - added begin(), end(), clone(const SemiExp&), and iterator<br>
* - added optional parameter in trim() to remove comments<br>
* ver 3.6 : 31 Jul 2016<br>
* - added clone function<br>
* - qualified length() as const<br>
* ver 3.5 : 15 Feb 2016<br>
* - modifications to implement ITokCollection:<br>
*   - added member functions: const indexer, push_back, remove(tok), <br>
*     toLower, isComment, clear<br>
*   - changed trim to trimFront<br>
* ver 3.4 : 06 Feb 2016<br>
* - added some additional comments<br>
* ver 3.3 : 03 Feb 2016<br>
* - completed addition of terminators<br>
* - added trim() and remove()<br>
* ver 3.2 : 02 Feb 2016<br>
* - declared SemiExp copy constructor and assignment operator = delete<br>
* - added default argument for Toker pointer to nullptr so SemiExp<br>
*   can be used like a container of tokens.<br>
* - if pToker is nullptr then get() will throw logic_error exception<br>
* ver 3.1 : 30 Jan 2016<br>
* - changed namespace to Scanner<br>
* - fixed bug in termination due to continually trying to read<br>
*   past end of stream if last tokens didn't have a semiExp termination<br>
*   character<br>
* ver 3.0 : 29 Jan 2016<br>
* - built in help session, Friday afternoon<br>
*<br>
* Planned Additions and Changes:<br>
* ------------------------------<br>
* - change the ITokCollection interface to match what is needed for the<br>
*   parser, and make SemiExp implement that interface<br>
* - add public :, protected :, private : as terminators<br>
* - move creation of tokenizer into semiExp constructor so<br>
*   client doesn't have to write that code<br>
*/<br>
<br>
#include &lt;vector&gt;<br>
#include &lt;string&gt;<br>
#include "../Tokenizer/Tokenizer.h"<br>
#include "../SemiExp/itokcollection.h"<br>
<br>
namespace Scanner<br>
{<br>
  class SemiExp : public ITokCollection<br>
  {<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
  public:<br>
    using iterator = std::vector&lt;std::string&gt;::iterator;<br>
    SemiExp(Toker* pToker = nullptr);<br>
    SemiExp(const SemiExp& se);<br>
    SemiExp(SemiExp&& se);<br>
    SemiExp& operator=(const SemiExp&);<br>
    SemiExp& operator=(SemiExp&& se);<br>
    iterator begin() override;<br>
    iterator end() override;<br>
    bool get(bool clear = true) override;<br>
    ITokCollection* clone() const override;<br>
    void clone(const ITokCollection& se, size_t offSet = 0) override;<br>
    std::string& operator[](size_t n);<br>
    std::string operator[](size_t n) const;<br>
    size_t length() const;<br>
    size_t find(const std::string& tok, size_t offSet = 0) const;<br>
    void trimFront();<br>
    void trim(bool removeComments = true);<br>
    void toLower();<br>
    bool remove(const std::string& tok);<br>
    bool remove(size_t n);<br>
    void push_back(const std::string& tok);<br>
    void clear();<br>
    bool isComment(const std::string& tok) const;<br>
    std::string show(bool showNewLines = false) const;<br>
    size_t currentLineCount() const;<br>
  private:<br>
    bool isTerminator(const std::string& tok) const;<br>
    bool getHelper(bool clear = false);<br>
    bool isSemiColonBetweenParens() const;<br>
    bool hasFor = false;<br>
    std::vector&lt;std::string&gt; _tokens;<br>
    Toker* _pToker;<br>
  }</div>;<br>
}<br>
#endif<br>
<//pre><//body><//html>