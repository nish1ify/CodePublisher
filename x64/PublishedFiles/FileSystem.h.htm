<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - </a><br><a href = "CppProperties.cpp.htm">CppProperties.cpp - </a><br><a href = "FileSystem.h.htm">FileSystem.h - </a><br><a href = "Test2.cpp.htm">Test2.cpp - </a><br><br><br>#ifndef FILESYSTEM_H<br>
#define FILESYSTEM_H<br>
/////////////////////////////////////////////////////////////////////////////<br>
// FileSystem.h - Support file and directory operations                    //<br>
// ver 2.6                                                                 //<br>
// ----------------------------------------------------------------------- //<br>
// copyright © Jim Fawcett, 2012                                           //<br>
// All rights granted provided that this notice is retained                //<br>
// ----------------------------------------------------------------------- //<br>
// Language:    Visual C++, Visual Studio 2010                             //<br>
// Platform:    Dell XPS 8300, Core i7, Windows 7 SP1                      //<br>
// Application: Summer Projects, 2012                                      //<br>
// Author:      Jim Fawcett, CST 4-187, Syracuse University                //<br>
//              (315) 443-3948, jfawcett@twcny.rr.com                      //<br>
/////////////////////////////////////////////////////////////////////////////<br>
/*<br>
 * Module Operations:<br>
 * ==================<br>
 * This module provides classes, File, FileInfo, Path, Directory, and <br>
 * FileSystemSearch.<br>
 *<br>
 * The File class supports opening text and binary files for either input <br>
 * or output.  File objects have names, get and put lines of text, get and<br>
 * put blocks of bytes if binary, can be tested for operational state,<br>
 * cleared of errors, and output File objects can be flushed to their streams.<br>
 *<br>
 * FileInfo class accepts a fully qualified filespec and supports queries<br>
 * concerning name, time and date, size, and attributes.  You can compare<br>
 * FileInfo objects by name, date, and size.<br>
 *<br>
 * Path class provides static methods to turn a relative filespec into an<br>
 * absolute filespec, return the path, name, or extension of the filespec,<br>
 * and build filespecs from path and name.  Path also provides methods to<br>
 * convert filespecs to uppercase and to lowercase.<br>
 *<br>
 * The Directory class supports getting filenames or directories from a <br>
 * fully qualified filespec, e.g., path + filename pattern using static<br>
 * methods.  It also provides non-static methods to get and set the current<br>
 * directory.<br>
 *<br>
 * Public Interface:<br>
 * =================<br>
 * File f(filespec,File::in,File::binary);<br>
 * File g(filespec,File::out,File::binary);<br>
 * while(f.isGood()) {<br>
 *   block b = f.getBlock();<br>
 *   g.putBlock(b);<br>
 * }<br>
 * File h(filespec,File::in);<br>
 * h.readLine();<br>
 *<br>
 * FileInfo fi("..\foobar.txt");<br>
 * if(fi.good())<br>
 *   ...<br>
 * std::string filespec = "..\temp.txt";<br>
 * std::string fullyqualified = Path::getFullFileSpec(filename);<br>
 *  -- This uses the current path to expand a relative path.<br>
 *  -- If you have a filespec relative to some other path<br>
 *  -- you need to setCurrentPath(newPath), use getFullFileSpec(...)<br>
 *  -- then reset the current path with setCurrentPath(origPath)<br>
 * std::string fullyqualified = Path::fileSpec(path, filename);<br>
 *  -- This simply concatenates path with filename<br>
 * std::string path = Path::getPath(fullyqualified);<br>
 * std::string name = Path::getName(fullyqualified);<br>
 * std::string extn = Path::getExt(fullyqualified);<br>
 *<br>
 * Directory d;<br>
 * std::string dir = d.getCurrentDirectory();<br>
 * d.setCurrentDirectory(dir);<br>
 * std::vector&lt;std::string&gt; files = Directory::getFiles(path, pattern);<br>
 * std::vector&lt;std::string&gt; dirs = Directory::getDirectories(path);<br>
 * <br>
 * Required Files:<br>
 * ===============<br>
 * FileSystem.h, FileSystem.cpp<br>
 *<br>
 * Build Command:<br>
 * ==============<br>
 * cl /EHa /DTEST_FILESYSTEM FileSystem.cpp<br>
 *<br>
 * Maintenance History:<br>
 * ====================<br>
 * ver 2.6 : 04 Apr 15<br>
 * - added File::getBuffer(...) and File::putBuffer(...) for use with<br>
 *   Sockets package.<br>
 * ver 2.5 : 02 Feb 15<br>
 * - added test for empty file in File::readAll()<br>
 * - fixed a debug assert that happens in std::isspace in File::ReadAll()<br>
 *   on certain non-ascii characters that may occur in a binary file.<br>
 *   The fix was to replace std::isspace(char) with an overload<br>
 *   std::isspace(char, locale&) from the standard locale library.<br>
 * - added some demo code in test stub to show how to handle attempting<br>
 *   to read non-text file with File::ReadLine() and File::readAll();<br>
 * ver 2.4 : 01 Feb 15<br>
 * - added File::readAll()<br>
 * - improved test stub testing<br>
 * ver 2.3 : 31 Jan 15<br>
 * - fixed bug in File::getLine() discovered by Huanming Fang<br>
 *   This appears to be a change in behavior of istream::getline(...) with C++11<br>
 * - added comments in Public Interface, above, to clarify way that Path::getFullFileSpec<br>
 *   and Path::fileSpec work.<br>
 * ver 2.2 : 23 Feb 13<br>
 * - fixed bug in Path::getExt(...) discovered by Yang Zhou and Kevin Kong<br>
 * ver 2.1 : 07 Jun 12<br>
 * - moved FileSystemSearch to cpp file to make private<br>
 * - added bool withExt parameter to Path::getName<br>
 * - made Directory's getCurrentDirectory and setCurrentDirectory static<br>
 * - added exists, create, and remove to Directory class<br>
 * ver 2.0 : 04 Jun 12<br>
 * - made a few small changes to provide same interface as <br>
 *   Linux version.<br>
 * ver 1.0 : 31 Jan 09<br>
 * - first release<br>
 */<br>
#include &lt;fstream&gt;<br>
#include &lt;string&gt;<br>
#include &lt;vector&gt;<br>
#include &lt;windows.h&gt;<br>
<br>
namespace FileSystem<br>
{<br>
  /////////////////////////////////////////////////////////<br>
  // Block<br>
  <br>
  typedef char Byte;<br>
<br>
  class Block<br>
  {<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
  public:<br>
    Block(size_t size=0) : bytes_(size) {}<br>
    Block(Byte* beg, Byte* end);<br>
    void push_back(Byte b);<br>
    Byte& operator[](size_t i);<br>
    Byte operator[](size_t i) const;<br>
    bool operator==(const Block&) const;<br>
    bool operator!=(const Block&) const;<br>
    size_t size() const;<br>
  private:<br>
    std::vector&lt;Byte&gt; bytes_;<br>
  }</div>;<br>
<br>
  /////////////////////////////////////////////////////////<br>
  // File<br>
  <br>
  class File<br>
  {<button id ="998"onclick="myFunction2();toggleText2(this.id); ">-</button><div id = "myDIV2"><br>
  public:<br>
    using byte = char;<br>
    enum direction { in, out };<br>
    enum type { text, binary };<br>
    File(const std::string& filespec);<br>
    bool open(direction dirn, type typ=File::text);<br>
    ~File();<br>
    std::string name();<br>
    std::string getLine(bool keepNewLine = false);<br>
    std::string readAll(bool KeepNewLines = false);<br>
    void putLine(const std::string& line, bool wantReturn=true);<br>
    Block getBlock(size_t size);<br>
    void putBlock(const Block&);<br>
    size_t getBuffer(size_t bufLen, byte* buffer);<br>
    void putBuffer(size_t bufLen, byte* buffer);<br>
    bool isGood();<br>
    void clear();<br>
    void flush();<br>
    void close();<br>
    static bool exists(const std::string& file);<br>
    static bool copy(const std::string& src, const std::string& dst, bool failIfExists=false);<br>
    static bool remove(const std::string& filespec);<br>
  private:<br>
    std::string name_;<br>
    std::ifstream* pIStream;<br>
    std::ofstream* pOStream;<br>
    direction dirn_;<br>
    type typ_;<br>
    bool good_;<br>
  }</div>;<br>
<br>
  inline std::string File::name() { return name_; }<br>
<br>
  /////////////////////////////////////////////////////////<br>
  // FileInfo<br>
<br>
  class FileInfo<br>
  {<button id ="997"onclick="myFunction3();toggleText3(this.id); ">-</button><div id = "myDIV3"><br>
  public:<br>
    enum dateFormat { fullformat, timeformat, dateformat };<br>
    FileInfo(const std::string& fileSpec);<br>
    bool good();<br>
    std::string name() const;<br>
    std::string date(dateFormat df=fullformat) const;<br>
    size_t size() const;<br>
    <br>
    bool isArchive() const;<br>
    bool isCompressed() const;<br>
    bool isDirectory() const;<br>
    bool isEncrypted() const;<br>
    bool isHidden() const;<br>
    bool isNormal() const;<br>
    bool isOffLine() const;<br>
    bool isReadOnly() const;<br>
    bool isSystem() const;<br>
    bool isTemporary() const;<br>
<br>
    bool operator&lt;(const FileInfo& fi) const;<br>
    bool operator==(const FileInfo& fi) const;<br>
    bool operator&gt;(const FileInfo& fi) const;<br>
    bool earlier(const FileInfo& fi) const;<br>
    bool later(const FileInfo& fi) const;<br>
    bool smaller(const FileInfo& fi) const;<br>
    bool larger(const FileInfo& fi) const;<br>
  private:<br>
    bool good_;<br>
    static std::string intToString(long i);<br>
    WIN32_FIND_DATAA data;<br>
  }</div>;<br>
<br>
  /////////////////////////////////////////////////////////<br>
  // Path<br>
<br>
  class Path<br>
  {<button id ="996"onclick="myFunction4();toggleText4(this.id); ">-</button><div id = "myDIV4"><br>
  public:<br>
    static std::string getFullFileSpec(const std::string& fileSpec);<br>
    static std::string getPath(const std::string& fileSpec);<br>
    static std::string getName(const std::string& fileSpec, bool withExt=true);<br>
    static std::string getExt(const std::string& fileSpec);<br>
    static std::string fileSpec(const std::string& path, const std::string& name);<br>
    static std::string toLower(const std::string& src);<br>
    static std::string toUpper(const std::string& src);<br>
  }</div>;<br>
  <br>
  /////////////////////////////////////////////////////////<br>
  // Directory<br>
<br>
  class Directory<br>
  {<button id ="995"onclick="myFunction5();toggleText5(this.id); ">-</button><div id = "myDIV5"><br>
  public:<br>
    static bool create(const std::string& path);<br>
    static bool remove(const std::string& path);<br>
    static bool exists(const std::string& path);<br>
    static std::string getCurrentDirectory();<br>
    static bool setCurrentDirectory(const std::string& path);<br>
    static std::vector&lt;std::string&gt; getFiles(const std::string& path=".", const std::string& pattern="*.*");<br>
    static std::vector&lt;std::string&gt; getDirectories(const std::string& path=".", const std::string& pattern="*.*");<br>
  private:<br>
    //static const int BufSize = 255;<br>
    //char buffer[BufSize];<br>
  }</div>;<br>
}<br>
<br>
#endif<br>
<//pre><//body><//html>