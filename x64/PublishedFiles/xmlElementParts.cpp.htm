<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - </a><br><a href = "GrammarHelpers.cpp.htm">GrammarHelpers.cpp - </a><br><a href = "Tokenizer.h.htm">Tokenizer.h - </a><br><a href = "xmlElementParts.h.htm">xmlElementParts.h - </a><br><br><br>/////////////////////////////////////////////////////////////////////<br>
//  XmlElementParts.cpp - Collects tokens for XML analysis         //<br>
//  ver 1.3                                                        //<br>
//                                                                 //<br>
//  Language:      Visual C++ 2008, SP1                            //<br>
//  Platform:      Dell Precision T7400, Vista Ultimate SP1        //<br>
//  Application:   Prototype for CSE687 Pr1, Sp09                  //<br>
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //<br>
//                 (315) 443-3948, jfawcett@twcny.rr.com           //<br>
/////////////////////////////////////////////////////////////////////<br>
<br>
#include &lt;algorithm&gt;<br>
#include "XmlElementParts.h"<br>
<br>
//----&lt; construct XmlParts instance &gt;---------------------------<br>
<br>
XmlParts::XmlParts(Toker* pTokr) : pToker(pTokr), Verbose(false)<br>
{<br>
}<br>
//----&lt; destructor &gt;-------------------------------------------<br>
<br>
XmlParts::~XmlParts()<br>
{<br>
}<br>
//----&lt; is this a terminating token? &gt;-------------------------<br>
<br>
bool XmlParts::isTerminator(std::string tok)<br>
{<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
  if(tok.length() == 0)<br>
    return false;<br>
  if(tok == "&gt;")<br>
    return true;<br>
  return false;<br>
}</div><br>
//<br>
//----&lt; collect an XmlElementParts sequence &gt;------------------<br>
<br>
bool XmlParts::get()<br>
{<button id ="998"onclick="myFunction2();toggleText2(this.id); ">-</button><div id = "myDIV2"><br>
  toks.clear();<br>
  std::string tok;<br>
  do<br>
  {<br>
    if(pToker-&gt;isFileEnd())<br>
    {<br>
      if(length() &gt; 0)<br>
        return true;<br>
      return false;<br>
    }<br>
    tok = pToker-&gt;getTok();<br>
    if(Verbose)<br>
    {<br>
      if(tok != "\n")<br>
        std::cout &lt;&lt; "\n--tok=" &lt;&lt; tok &lt;&lt; std::endl;<br>
      else<br>
        std::cout &lt;&lt; "\n--tok=newline\n";<br>
    }<br>
    if(toks.size() &gt; 0 && tok == "&lt;")<br>
    {<br>
      pToker-&gt;putback('&lt;');<br>
      break;<br>
    }<br>
    if(tok != "\n")<br>
      toks.push_back(tok);<br>
  } while(!isTerminator(tok));<br>
  return true;<br>
}</div><br>
//----&lt; index operator &gt;---------------------------------------<br>
<br>
std::string& XmlParts::operator[](int n)<br>
{<button id ="997"onclick="myFunction3();toggleText3(this.id); ">-</button><div id = "myDIV3"><br>
  if(n &lt; 0 || toks.size() &lt;= (size_t)n)<br>
    throw std::exception("XmlParts index out of range");<br>
  return toks[n];<br>
}</div><br>
//----&lt; collect semi-expression as space-seperated string &gt;----<br>
<br>
std::string XmlParts::show()<br>
{<button id ="996"onclick="myFunction4();toggleText4(this.id); ">-</button><div id = "myDIV4"><br>
  if(toks.size() == 0)<br>
    return "";<br>
  std::string temp(" ");<br>
  for(size_t i=0; i&lt;toks.size(); ++i)<br>
    if(toks[i] != "\n")<br>
      temp.append(" ").append(toks[i]);<br>
  return temp;<br>
}</div><br>
//<br>
//----&lt; is tok found in XmlElementParts? &gt;---------------------<br>
<br>
int XmlParts::find(const std::string& tok)<br>
{<button id ="995"onclick="myFunction5();toggleText5(this.id); ">-</button><div id = "myDIV5"><br>
  for(int i=0; i&lt;length(); ++i)<br>
    if(tok == toks[i])<br>
      return i;<br>
  return length();<br>
}</div><br>
//----&lt; remove tok if found in semi-expression &gt;---------------<br>
<br>
bool XmlParts::remove(const std::string& tok)<br>
{<button id ="994"onclick="myFunction6();toggleText6(this.id); ">-</button><div id = "myDIV6"><br>
  std::vector&lt;std::string&gt;::iterator it;<br>
  it = std::find(toks.begin(),toks.end(),tok);<br>
  if(it != toks.end())<br>
  {<br>
    toks.erase(it);<br>
    return true;<br>
  }<br>
  return false;<br>
}</div><br>
//----&lt; remove leading newlines &gt;------------------------------<br>
<br>
void XmlParts::trimFront()<br>
{<button id ="993"onclick="myFunction7();toggleText7(this.id); ">-</button><div id = "myDIV7"><br>
  while(toks.size() &gt; 0 && toks[0] == "\n")<br>
    remove("\n");<br>
}</div><br>
//----&lt; make tokens lowercase &gt;--------------------------------<br>
<br>
void XmlParts::toLower()<br>
{<button id ="992"onclick="myFunction8();toggleText8(this.id); ">-</button><div id = "myDIV8"><br>
  for(int i=0; i&lt;length(); ++i)<br>
  {<br>
    for(size_t j=0; j&lt;(*this)[i].length(); ++j)<br>
    {<br>
      (*this)[i][j] = tolower((*this)[i][j]);<br>
    }<br>
  }<br>
}</div><br>
//<br>
//----&lt; test stub &gt;--------------------------------------------<br>
<br>
#ifdef TEST_XMLELEMENTPARTS<br>
<br>
int main(int argc, char* argv[])<br>
{<button id ="991"onclick="myFunction9();toggleText9(this.id); ">-</button><div id = "myDIV9"><br>
  std::cout &lt;&lt; "\n  Testing XmlParts class\n "<br>
            &lt;&lt; std::string(23,'=') &lt;&lt; std::endl;<br>
  std::cout<br>
    &lt;&lt; "\n  Note that quotes are returned as single tokens\n\n";<br>
<br>
  if(argc &lt; 2)<br>
  {<br>
    std::cout <br>
      &lt;&lt; "\n  please enter name of file to process on command line\n\n";<br>
    return 1;<br>
  }<br>
<br>
  for(int i=1; i&lt;argc; ++i)<br>
  {<br>
    std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i];<br>
    std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]),'-') &lt;&lt; "\n\n";<br>
    try<br>
    {<br>
      Toker toker(argv[i]);<br>
      toker.setMode(Toker::xml);<br>
      XmlParts parts(&toker);<br>
    //parts.verbose();                 // uncomment to show token details<br>
      while(parts.get())<br>
        std::cout &lt;&lt; parts.show().c_str() &lt;&lt; std::endl;<br>
      std::cout &lt;&lt; "\n\n";<br>
    }<br>
    catch(std::exception ex)<br>
    {<br>
      std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";<br>
    }<br>
  }<br>
}</div><br>
<br>
#endif<br>
<//pre><//body><//html>