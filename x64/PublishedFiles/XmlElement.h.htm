<html><head><link rel="stylesheet" type = "text/css"  href="Publisher.css"/><script type="text/javascript" src = "jssPublisher.js"></script></head><body><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - </a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - </a><br><a href = "FileSystem.h.htm">FileSystem.h - </a><br><a href = "Test1.cpp.htm">Test1.cpp - </a><br><a href = "XmlElement.cpp.htm">XmlElement.cpp - </a><br><a href = "XmlElement.h.htm">XmlElement.h - </a><br><br><br>#ifndef XMLELEMENT_H<br>
#define XMLELEMENT_H<br>
///////////////////////////////////////////////////////////////////<br>
// XmlElement.h - define XML Element types                       //<br>
// ver 1.7                                                       //<br>
// Application: Help for CSE687 Pr#2, Spring 2015                //<br>
// Platform:    Dell XPS 2720, Win 8.1 Pro, Visual Studio 2013   //<br>
// Author:      Jim Fawcett, CST 4-187, 443-3948                 //<br>
//              jfawcett@twcny.rr.com                            //<br>
///////////////////////////////////////////////////////////////////<br>
/*<br>
* Package Operations:<br>
* -------------------<br>
* This package is intended to help students in CSE687 - Object Oriented Design<br>
* get started with Project #2 - XML Document Model.  It uses C++11 constructs,<br>
* most noteably std::shared_ptr.  The XML Document Model is essentially<br>
* a program-friendly wrapper around an Abstract Syntax Tree (AST) used to<br>
* contain the results of parsing XML markup.<br>
*<br>
* Abstract Syntax Trees are unordered trees with two types of nodes:<br>
*   Terminal nodes     - nodes with no children<br>
*   Non-Terminal nodes - nodes which may have a finite number of children<br>
* They are often used to contain the results of parsing some language.<br>
*<br>
* The elements defined in this package will be used in the AST defined in<br>
* the AbstractSyntaxTree package, included in this Visual Studio 2013<br>
* solution.<br>
*   AbstractXmlElement - base for all the XML Element types<br>
*   DocElement         - XML element with children designed to hold prologue, Xml root, and epilogue<br>
*   TaggedElement      - XML element with tag, attributes, child elements<br>
*   TextElement        - XML element with only text, no markup<br>
*   CommentElement     - XML element with comment markup and text<br>
*   ProcInstrElement   - XML element with markup and attributes but no children<br>
*   XmlDeclarElement   - XML declaration<br>
*<br>
* Required Files:<br>
* ---------------<br>
*   - XmlElement.h, XmlElement.cpp<br>
*<br>
* Build Process:<br>
* --------------<br>
*   devenv AST.sln /debug rebuild<br>
*<br>
* Maintenance History:<br>
* --------------------<br>
* ver 1.7 : 16 Mar 2015<br>
* - added items to ToDo list<br>
* ver 1.6 : 08 Mar 2015<br>
* - added some more clarifying comments<br>
* ver 1.5 : 22 Feb 2015<br>
* - brought comments up to date<br>
* ver 1.4 : 21 Feb 15<br>
* - Added XmlDeclElement.  It has the syntax of a ProcInstrElement but has the<br>
*   constraint that if present it must be the first child of the document.  The<br>
*   best way to handle this seemed to be to create anther element type and have<br>
*   the XmlDocument constructor always add as the first child.<br>
* - Fixed a bug in DocElement::addChild found by Venkat Subha Rao Cheedella. <br>
*   addChild now correctly handles allowing as many comments and ProcInstructions<br>
*   as needed but only one tagged element as the root of the XML information.<br>
* ver 1.3 : 17 Feb 15<br>
* - Removed move ctor and move assign declar comments in all classes.<br>
*   Move construction and move assignment is needed only by the XmlDocument class<br>
* - added addAttribute and removeAttribute to the ProcInstrElement class<br>
* - fixed a bug in the DocElement::addChild method that prevented multiple<br>
*   ProcInstrElements and CommentElements from being added.<br>
* - Scott Constable pointed out two of these three problems to me earlier today.<br>
*   Thanks Scott!<br>
* ver 1.2 : 14 Feb 15<br>
* - removed removeChild(const std::string& value);<br>
* - declared deleted copy constructor and copy assignment<br>
* - added comment declaring move constructor and move assignment<br>
* - added DocElement - I decided that Scott Constable was right about this<br>
* - fixed flaw in declaration of ProcInstrElement attribs_ member<br>
* - return string by value from AbstractXmlElement::value() and all derived elements<br>
* ver 1.1 : 12 Feb 15<br>
* - modified Element::toString() to improve whitespace handling<br>
* - added attribute test in test stub<br>
* Ver 1.0 : 11 Feb 15<br>
* - first release<br>
*<br>
* ToDo:<br>
* -----<br>
* - add where() taking callable object<br>
* - add parsing of XML strings and files using XmlParts<br>
*   - make element and push on stack pop when get end tag<br>
*   - new element gets added to element on top then pushed<br>
*   - pop when reach end tag<br>
* - alternately call addElement recursively<br>
* - add preprocessor to wrap text in quotes<br>
* - add functions to find by tag, find by attribute name, and find by attribute value<br>
*   - these will be used in addChild and removeChild<br>
* - remove insertion of XmlDeclarElement in XmlDocument constructor<br>
* - reject XmlDeclarElement in AbstractXmlElement addChild<br>
* - override DocElement::addChild to accept XmlDeclarElement and insert in first slot of children_<br>
* - add type() element to all classes that returns element type to avoid dynamic_casts<br>
* - check ProcInstrElement and CommentElement for completeness<br>
*/<br>
<br>
#include &lt;memory&gt;<br>
#include &lt;string&gt;<br>
#include &lt;vector&gt;<br>
<br>
namespace XmlProcessing<br>
{<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // AbstractXmlElement - base class for all concrete element types<br>
<br>
  class AbstractXmlElement<br>
  {<button id ="999"onclick="myFunction1();toggleText1(this.id); ">-</button><div id = "myDIV1"><br>
  public:<br>
    using sPtr = std::shared_ptr &lt; AbstractXmlElement &gt; ;<br>
<br>
    virtual bool addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);<br>
    virtual bool removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);<br>
    virtual bool addAttrib(const std::string& name, const std::string& value);<br>
    virtual bool removeAttrib(const std::string& name);<br>
    virtual std::vector&lt;sPtr&gt; children();<br>
    virtual std::string tag() { return ""; }<br>
    virtual std::string value() = 0;<br>
    virtual std::string toString() = 0;<br>
    virtual ~AbstractXmlElement();<br>
  protected:<br>
    static size_t count;<br>
    static size_t tabSize;<br>
  }</div>;<br>
<br>
  inline bool AbstractXmlElement::addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild) { return false; }<br>
  inline bool AbstractXmlElement::removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild) { return false; }<br>
  inline std::vector&lt;AbstractXmlElement::sPtr&gt; AbstractXmlElement::children()<br>
  {<button id ="998"onclick="myFunction2();toggleText2(this.id); ">-</button><div id = "myDIV2"><br>
    return std::vector&lt;sPtr&gt;();<br>
  }</div><br>
  inline bool AbstractXmlElement::addAttrib(const std::string& name, const std::string& value) { return false; }<br>
  inline bool AbstractXmlElement::removeAttrib(const std::string& name) { return false; }<br>
  inline AbstractXmlElement::~AbstractXmlElement() {}<br>
<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // DocElement - holds the document prologue, XML tree, and epilog<br>
<br>
  class DocElement : public AbstractXmlElement<br>
  {<button id ="997"onclick="myFunction3();toggleText3(this.id); ">-</button><div id = "myDIV3"><br>
  public:<br>
    DocElement(std::shared_ptr&lt;AbstractXmlElement&gt; pRoot = nullptr);<br>
    ~DocElement() {}<br>
    DocElement(const DocElement& doc) = delete;<br>
    DocElement& operator=(const DocElement& doc) = delete;<br>
    virtual bool addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);<br>
    virtual bool removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);<br>
    virtual std::vector&lt;sPtr&gt; children();<br>
    virtual std::string value();<br>
    virtual std::string toString();<br>
  private:<br>
    bool hasXmlRoot();<br>
    std::vector&lt;std::shared_ptr&lt;AbstractXmlElement&gt;&gt; children_;<br>
  }</div>;<br>
<br>
  inline std::vector&lt;AbstractXmlElement::sPtr&gt; DocElement::children()<br>
  {<button id ="996"onclick="myFunction4();toggleText4(this.id); ">-</button><div id = "myDIV4"><br>
    return children_;<br>
  }</div><br>
  std::shared_ptr&lt;AbstractXmlElement&gt; makeDocElement(std::shared_ptr&lt;AbstractXmlElement&gt; pRoot = nullptr);<br>
<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // TextElement - represents the text part of an XML element<br>
<br>
  class TextElement : public AbstractXmlElement<br>
  {<button id ="995"onclick="myFunction5();toggleText5(this.id); ">-</button><div id = "myDIV5"><br>
  public:<br>
    TextElement(const std::string& text) : text_(text) {}<br>
    virtual ~TextElement() {}<br>
    TextElement(const TextElement& te) = delete;<br>
    TextElement& operator=(const TextElement& te) = delete;<br>
    virtual std::string value();<br>
    virtual std::string toString();<br>
  private:<br>
    std::string text_;<br>
  }</div>;<br>
<br>
  inline std::string TextElement::value() { return text_; }<br>
<br>
  std::shared_ptr&lt;AbstractXmlElement&gt; makeTextElement(const std::string& text);<br>
<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // Element - represents a tagged element with attributes and child elements<br>
<br>
  class TaggedElement : public AbstractXmlElement<br>
  {<button id ="994"onclick="myFunction6();toggleText6(this.id); ">-</button><div id = "myDIV6"><br>
  public:<br>
    TaggedElement(const std::string& tag) : tag_(tag) {};<br>
    TaggedElement(const TaggedElement& te) = delete;<br>
    virtual ~TaggedElement() {}<br>
    TaggedElement& operator=(const TaggedElement& te) = delete;<br>
    virtual bool addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);<br>
    virtual bool removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);<br>
    virtual std::vector&lt;sPtr&gt; children();<br>
    virtual bool addAttrib(const std::string& name, const std::string& value);<br>
    virtual bool removeAttrib(const std::string& name);<br>
    virtual std::string tag();<br>
    virtual std::string value();<br>
    virtual std::string toString();<br>
  private:<br>
    std::string tag_;<br>
    std::vector&lt;std::shared_ptr&lt;AbstractXmlElement&gt;&gt; children_;<br>
    std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribs_;<br>
  }</div>;<br>
<br>
  inline std::vector&lt;AbstractXmlElement::sPtr&gt; TaggedElement::children()<br>
  {<button id ="993"onclick="myFunction7();toggleText7(this.id); ">-</button><div id = "myDIV7"><br>
    return children_;<br>
  }</div><br>
  inline std::string TaggedElement::tag() { return tag_; }<br>
  std::shared_ptr&lt;AbstractXmlElement&gt; makeTaggedElement(const std::string& tag);<br>
<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // CommentElement - represents XML comments, e.g., &lt;!-- comment text --&gt;<br>
  //<br>
  // Incomplete<br>
<br>
  class CommentElement : public AbstractXmlElement<br>
  {<button id ="992"onclick="myFunction8();toggleText8(this.id); ">-</button><div id = "myDIV8"><br>
  public:<br>
    CommentElement(const std::string& text) : commentText_(text) {}<br>
    CommentElement(const CommentElement& ce) = delete;<br>
    virtual ~CommentElement() {}<br>
    CommentElement& operator=(const CommentElement& ce) = delete;<br>
    virtual std::string value() { return commentText_; }<br>
    virtual std::string toString();<br>
  private:<br>
    std::string commentText_ = "to be defined";<br>
  }</div>;<br>
<br>
  std::shared_ptr&lt;AbstractXmlElement&gt; makeCommentElement(const std::string& comment);<br>
<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // ProcInstrElement - represents XML Processing Instructions, e.g., &lt;?xml version="1.0"?&gt;<br>
  //<br>
  // Incomplete<br>
<br>
  class ProcInstrElement : public AbstractXmlElement<br>
  {<button id ="991"onclick="myFunction9();toggleText9(this.id); ">-</button><div id = "myDIV9"><br>
  public:<br>
    ProcInstrElement(const ProcInstrElement& pe) = delete;<br>
    ProcInstrElement(const std::string& type) : type_(type) {}<br>
    ProcInstrElement& operator=(const ProcInstrElement& pe) = delete;<br>
    virtual bool addAttrib(const std::string& name, const std::string& value);<br>
    virtual bool removeAttrib(const std::string& name);<br>
    virtual std::string value() { return type_; }<br>
    virtual std::string toString();<br>
  private:<br>
    std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribs_;<br>
    std::string type_ = "xml declaration";<br>
    std::string text;<br>
  }</div>;<br>
<br>
  std::shared_ptr&lt;AbstractXmlElement&gt; makeProcInstrElement(const std::string& type);<br>
<br>
  /////////////////////////////////////////////////////////////////////////////<br>
  // XmlDeclarElement - &lt;?xml version="1.0"?&gt;<br>
<br>
  class XmlDeclarElement : public AbstractXmlElement<br>
  {<button id ="990"onclick="myFunction10();toggleText10(this.id); ">-</button><div id = "myDIV10"><br>
  public:<br>
    XmlDeclarElement(const ProcInstrElement& pe) = delete;<br>
    XmlDeclarElement() {}<br>
    XmlDeclarElement& operator=(const ProcInstrElement& pe) = delete;<br>
    virtual bool addAttrib(const std::string& name, const std::string& value);<br>
    virtual bool removeAttrib(const std::string& name);<br>
    virtual std::string value() { return ""; }<br>
    virtual std::string toString();<br>
  private:<br>
    std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribs_;<br>
    std::string type_ = "xml declaration";<br>
  }</div>;<br>
<br>
  std::shared_ptr&lt;AbstractXmlElement&gt; makeXmlDeclarElement();<br>
<br>
<br>
  void title(const std::string& title, char underlineChar = '-');<br>
}<br>
#endif<br>
<//pre><//body><//html>